{
  "categories": [],
  "content": "Arbitrum One: Unraveling the intricacies of Arbitrum Rollup",
  "created": "2023-11-22T18:42:32.124Z",
  "guideType": "onboarding",
  "key": "arbitrum-one-arbitrum-university-177",
  "name": "Arbitrum One",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "## What is Arbitrum One ?\nArbitrum One is a Layer 2 optimistic rollup solution developed by Offchain Labs, designed to enhance Ethereum's performance and user experience by handling transactions off the Ethereum Mainnet (Layer 1). It operates on the Arbitrum Rollup protocol and settles to Ethereum's Layer 1, offering high-performance dApps with lower transaction costs and Ethereum-level security without additional trust assumptions. Powered by the Nitro technology stack, Arbitrum One boasts advanced features like calldata compression, separate contexts for execution and fault proving, and Ethereum L1 gas compatibility. Its multi-round interactive Optimistic Rollup approach optimistically assumes the correctness of data posted to the Ethereum mainnet, allowing challenges and efficient dispute resolution at low costs, while maintaining trustless protocol operation, EVM compatibility, and secure fund control for users.\n\n<div align=\"center\">\n  <img style=\"max-height:600px;margin-bottom:40px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_one_arbitrum_university_177/1700678482803_arbitrum_one.png\"/>\n</div>\n\n## What is Arbitrum roll up protocol?\nThe Arbitrum Rollup Protocol is a Layer 2 scaling solution that works in tandem with Ethereum's Layer 1, where it doesn't decide the outcomes of transactions but instead confirms the results that are already determined by the sequence of messages in the chain's inbox. Once a transaction is included in the chainâ€™s inbox, its outcome is considered finalized and can be reported as complete. Arbitrum nodes validate these transactions, providing users the confidence that their transactions are processed without the need for constant awareness of the rollup protocol's operation.\n\n### Benefits of Roll up Protocol\nThe purpose of the Arbitrum Rollup Protocol is twofold.\n \n#### Confirms Accuracy\nFirstly, it serves as a trustless method to verify transaction results and to identify and penalize dishonest parties. This is crucial because although the outcomes of transactions are known, without the protocol, there would be no way to confirm their accuracy and resolve disputes definitively. \n\n<div align=\"center\">\n  <img style=\"max-height:600px;margin-bottom:40px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_one_arbitrum_university_177/1700678526867_benefits_of%20rollup%20protocol.png\"/>\n</div>\n\n#### Ethereum Scalability\nSecondly, it relieves Ethereum from the burden of processing every transaction, thereby allowing for scalable operations that Ethereum alone could not efficiently monitor. By only stepping in when a transaction is contested, Ethereum can ensure the integrity of the Arbitrum chain while enabling fast and cost-effective Layer 2 transactions. This not only enhances the scalability of Ethereum but also maintains its security by enabling the confirmation of transactions and the processing of withdrawals back to Layer 1.",
      "name": "Introduction to Arbitrum One",
      "stepItems": [],
      "uuid": "4a797c46-12fd-437d-9784-346875967164"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "label": "Full Name",
          "required": false,
          "type": "PublicShortInput",
          "uuid": "8f3de2ec-9615-4352-98c4-b2b61a738717"
        },
        {
          "answerKeys": [
            "choice_1",
            "choice_2",
            "choice_3"
          ],
          "choices": [
            {
              "content": "Choice 1",
              "key": "choice_1"
            },
            {
              "content": "Choice 2",
              "key": "choice_2"
            },
            {
              "content": "Choice 3",
              "key": "choice_3"
            },
            {
              "content": "Choice 4",
              "key": "choice_4"
            }
          ],
          "content": "Contents of the question",
          "type": "MultipleChoice",
          "uuid": "3c0a1bd5-a0ec-4929-9614-2702b739cdd7",
          "explanation": "Explanation of the question"
        }
      ],
      "uuid": "287bba79-de96-4fbe-addd-140a78c46939"
    },
    {
      "content": "## How does Arbitrum Rollup Work?\nAn RBlock in the Arbitrum Rollup chain carries its identifier, the number of the last correct RBlock, the total of L2 blocks made, inbox messages used, and a hash of the chain's outputs. These except the RBlock's number are the proposer's unverified claims, which the protocol must confirm or reject. An RBlock also implies the correctness of all preceding RBlocks back to the origin and contests the validity of any direct older RBlocks. Validators can challenge an RBlock before a deadline by proposing an alternative, which could lead to a staked conflict resolution. Here is a step-by-step guide on how the rollup chain works to confirm the rBlocks\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_one_arbitrum_university_177/1699533758069_screenshot_2023-11-09%20at%205.41.43%20pm.png\"/>\n</div>\n\n### Step 1: RBlocks Creation\nValidators propose RBlocks, which form a chain managed by the Arbitrum rollup protocol, distinct from Ethereum's Layer 1 and Nitro's Layer 2 blocks. When first proposed, RBlocks are 'unresolved' meaning their status as either confirmed or rejected has not yet been determined. Over time, each RBlock is resolved. Confirmed RBlocks become part of the chain's permanent history.\n\n### Step 2: Chain History and Progress\nConfirmed RBlocks are fully accepted and recorded by Ethereum's Layer 1 contracts. The most recent confirmed RBlock is known as the \"latest confirmed RBlock\". Newer RBlocks are proposed and remain unconfirmed until their resolution deadlines pass. The earliest of these is the \"first unresolved RBlock\".\n\n### Step 3: Building on Proposed RBlocks\nValidators can propose new RBlocks based on the latest proposed (but not yet confirmed) RBlock, enabling the chain to grow continuously without waiting for each RBlock's confirmation. Typically, proposed RBlocks are valid and thus are eventually confirmed.\n\n### Step 4: Dealing with Malicious Validators\nIn cases where validators act maliciously by proposing incorrect RBlocks, the protocol can handle a variety of conflict scenarios such as a confirmed RBlock is fully accepted, a rejected RBlock is discarded for being incorrect. Subsequent RBlocks can be rejected due to incorrect claims or because they build on other rejected RBlocks. Unresolved RBlocks are awaiting confirmation or rejection. If they are built on a rejected RBlock, they will also be rejected.\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_one_arbitrum_university_177/1699533830310_screenshot_2023-11-09%20at%205.39.32%20pm.png\"/>\n</div>\n\n### Step 5: Resolving Conflicts\nConflicts between RBlocks which claim the same predecessor, will be resolved by the protocol, with at least one being rejected. The protocol resolves RBlocks in numerical order. If an RBlock is rejected, any subsequent RBlocks depending on it are automatically rejected.\n\n### Step 6: Security Assurance\nDespite potential conflicts, the security property of the rollup protocol ensures that even if multiple parties act dishonestly, the correct chain execution will be confirmed, safeguarding the integrity of the rollup chain. Validators may stake ETH as a bond for proposing RBlocks. If they propose a wrong RBlock, they will lose their stake, incentivizing honest behavior.",
      "name": "Understanding Arbitrum Rollup",
      "stepItems": [],
      "uuid": "a622a2f6-e742-455b-9455-c724cbefae40"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "1aa5dfb6-6c34-43a5-b9ae-9f45f513b50e"
    },
    {
      "content": "## The Roll up security\nArbitrum Rollup's security model leverages the robustness of Ethereum's Layer 1 to offer a Layer 2 scaling solution that doesn't compromise on trustlessness or decentralization. By utilizing a unique combination of on-chain data availability and off-chain computation, it ensures that even if all but one validator acts maliciously, the integrity of transactions is preserved. Moreover, the interactive dispute resolution process allows any honest participant to challenge incorrect claims by staking, thereby maintaining the overall security and reliability of the network. \n\n### Validators\nValidators are essential participants in the Arbitrum Rollup protocol, responsible for proposing and ensuring the accuracy of RBlocks in the network. Some validators, known as stakers, back their commitments with an ETH deposit, which they lose if found cheating. In most cases, only one staker is active to validate the current state unless disputes arise. While the role is intended to be open to all, Arbitrum One currently uses an allowlist for validators. Any honest validator is empowered to enforce the correct processing of transactions, maintaining the chain's trustlessness and security.\n\n## Staking\nHere's a step-by-step process of staking within the Arbitrum network:\n\n### Step 1: Stake Deposit\nValidators who choose to become stakers deposit ETH into Arbitrum Layer 1 contracts. These deposits are held as collateral and are at risk if the staker is involved in a losing challenge. A single stake can cover a chain of RBlocks. Stakers are automatically staked on the latest confirmed RBlock and may also opt to stake on a successor to that RBlock, committing to a sequence that represents a single, coherent claim about the chain's history. \n\n### Step 2: Staking Conditions\nValidators not currently staked can place a stake on the latest confirmed RBlock by depositing the minimum stake amount. Validators already staked on an RBlock can extend their stake to one successor of that RBlock without additional deposits. Creating a new RBlock as a successor to an RBlock you're staked on is considered an extension of your stake.  If a validator is staked only on the latest confirmed RBlock, they (or anyone else) can request a refund of their stake.\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_one_arbitrum_university_177/1699543299054_screenshot_2023-11-09%20at%208.20.29%20pm.png\"/>\n</div>\n\n### Step 3: Creating New RBlocks\nTo propose a new RBlock, a validator must be a staker and have an active stake on the RBlock's predecessor. This requirement ensures validators have a vested interest in the accuracy of their proposed RBlocks. The protocol tracks the required stake amount, which typically matches the base stake amount set by the Nitro chain. If the chain is progressing slowly in confirming RBlocks, the required stake amount may temporarily increase.\n\n### Step 4: Commitment and Resolution\nOnce staked on an RBlock, a validator cannot unstake. The stake is either returned following the confirmation of all RBlocks they're staked on, or lost if the staked RBlock is rejected. Losing a challenge results in the removal of the stake from all RBlocks and forfeiture of the staked funds. The minimum stake amount can increase exponentially based on the time elapsed since the deadline of the first unresolved RBlock, to discourage stalling tactics. As the chain resumes normal progress, the stake requirement decreases.\n\nThis staking mechanism is designed to align the validators' financial incentives with the integrity and efficient progression of the Arbitrum chain.",
      "name": "Security",
      "stepItems": [],
      "uuid": "41ee7801-5700-4906-bb10-4d8d7e87e9bb"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "dc1888d0-1e86-43c3-a49e-06899a54b60e"
    },
    {
      "content": "## Dispute Resolution\nThe dispute resolution process in Arbitrum, which utilizes interactive proving, unfolds as follows:\n\n### Step 1: Initiation of Dispute\nThe claiment makes a claim about the result of the chain's computation. The other person challenges their claim, disagreeing with the result they propose. Both parties engage in a back-and-forth communication, overseen by an L1 contract, aiming to resolve their dispute.\n\n### Step 2: Dissection of Dispute\nThe claiment split their original claim, which covers N execution steps, into two separate claims, each representing N/2 steps. Other party then selects one of these N/2-step claims to contest, effectively reducing the dispute's scope by half. The process of halving the dispute continues, with each iteration focusing on an increasingly smaller portion of the execution steps. This iterative process is repeated until the dispute is narrowed down to a disagreement about a single step of execution.\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_one_arbitrum_university_177/1699538665121_screenshot_2023-11-09%20at%206.31.01%20pm.png\"/>\n</div>\n\n### Step 3: L1 Contract's Role\nDuring the iterative halving process, the L1 contract does not evaluate the merits of the execution; it only ensures that the protocol's rules are followed. Only when the dispute is about a single step does the L1 contract evaluate the execution to determine the correctness of the claim.\n\n### Step 4: Resolution\nBoth parties are encouraged to perform as much of the dispute resolution work off-chain as possible, minimizing the load on the L1 contract. Once the dispute is reduced to a single step, the L1 contract examines the specific instruction in question to resolve the dispute, determining whether claiment's claim is correct.\n\n## Rules to confirm or reject\nThe first unresolved RBlock can be confirmed if:\n\n- The RBlock's predecessor is the latest confirmed RBlock, and\n\n- The RBlock's deadline has passed, and\n\n- There is at least one staker, and\n\n- All stakers are staked on the RBlock.\n\nThe first unresolved RBlock can be rejected if:\n\n- The RBlock's predecessor has been rejected, or\n\n- All of the following are true:\n\n   The RBlock's deadline has passed, and\n\n   There is at least one staker, and\n\n   No staker is staked on the RBlock.",
      "name": "Fraud Proving",
      "stepItems": [],
      "uuid": "4eea708f-4c60-45b1-8109-a2a64e003b41"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "955c8d11-2337-4d99-8b73-c07e348d5167"
    },
    {
      "content": "## Differences between Arbitrum One (Rollup) and Arbitrum Nova (AnyTrust) \nArbitrum One and Arbitrum nova are based on different block authentication mechanisms which results in different use face, operations and cost. Some of the major differences between two chains are listed in the table below.\n\n| Feature               | Arbitrum One (Rollup)                                                        | Arbitrum Nova (AnyTrust)                                               |\n|-----------------------|------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| **Data Authenticity** | Layer 2 transaction data is posted on the Ethereum blockchain.               | Uses AnyTrust technology with a Data Availability Committee (DAC).     |\n| **Trust Assumption**  | Trustless and permissionless, open for anyone to validate.                   | Relies on at least two honest DAC members to operate securely.         |\n| **Gas Price**         | Minimum gas price is 0.1 gwei.                                               | Minimum gas price is 0.01 gwei, potentially 10x cheaper.               |\n| **Scalability**       | Suitable for general use cases.                                              | More scalable, designed for high-load dApps like NFTs and social networks. |\n| **DeFi Protocols**    | Higher TVL with major DeFi protocols like Uniswap, Aave, and Curve.          | Lower TVL with a focus on gaming and social, includes Sushi and others.   |\n| **Transaction Costs** | Relatively higher due to full data posting on Ethereum.                      | Lower costs due to only posting certificates on Layer 1.               |\n",
      "name": "Arbitrum One vs Arbitrum Nova",
      "stepItems": [],
      "uuid": "f6537833-a078-4afc-a156-ac54ae68b284"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_one_arbitrum_university_177/1699877592179_rectangle_96.png",
  "uuid": "arbitrum-one-arbitrum-university-177",
  "version": 1,
  "priority": 90
}