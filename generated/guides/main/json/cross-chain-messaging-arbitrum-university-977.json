{
  "categories": [],
  "content": "Bridging Blockchains with Seamless Communication",
  "created": "2023-11-13T14:44:47.533Z",
  "guideType": "onboarding",
  "key": "cross-chain-messaging-arbitrum-university-977",
  "name": "Cross Chain Messaging",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "## L1 to L2 messaging\n### what are retryable tickets \n### lIfecycle of retryable tickets \n\n## Other Concepts \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Retryable Tickets\n\nRetryable tickets are a crucial method for creating L1 to L2 messages in the Arbitrum network. These tickets allow L1 transactions to initiate messages that are executed on L2. The Retryable Tickets Lifestyle includes various stages such as:\n\n#### Submission of Retryable Tickets\n\nTo create a retryable ticket, a user needs to call the createRetryableTicket function of the inbox contract. This function requires the sender to provide a reasonable amount of funds to cover the submission and execution of the ticket. The funds are deducted from the sender and placed into an escrow for later use in redeeming the ticket. The creation of a ticket on L1 is separate from its execution on L2, so a successful L1 ticket creation does not guarantee a successful redemption.\n\n#### Auto-Redemption\n\nAfter a ticket is successfully created, two conditions are checked before attempting to execute it on L2. First, the user's L2 balance must be sufficient to cover the gas fees for execution. Second, the gas price provided by the user must be greater than or equal to the L2 base fee. If these conditions are met, the ticket is auto-redeemed, and the execution takes place with the original submission's parameters. The submission fee is refunded to the user on L2.\n\n#### Manual Redemption\n\nIf a ticket is not auto-redeemed or the initial redemption fails, the submission fee is collected on L2 to cover the resources required to keep the ticket in memory for a fixed period. In this case, a manual redemption of the ticket is required. Anyone can attempt to manually redeem the ticket by calling the redeem precompile method. The gas for the redemption attempt comes from the call to redeem, ensuring that the block's gas limit is not reached before execution.\n\n#### Ticket Expiration\n\nIf a ticket is not redeemed or rescheduled within seven days, it expires and is automatically discarded. However, the ticket can be kept alive for another full period if a fee is paid. It is important to note that if a ticket expires without being redeemed, any message and value it carries could be lost without the possibility of recovery.\n\nTO DO: ADD IMAGES FROM https://docs.arbitrum.io/arbos/l1-to-l2-messaging ",
      "name": "L1 to L2 Messaging",
      "stepItems": [],
      "uuid": "4c6d4203-d72d-45fc-bdbd-c0d8b9dc899d"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "45ccd21e-4685-41e2-b6f7-18d3c9f606fd"
    },
    {
      "content": "## Eth Deposits\n\nEth deposits are a way to send Ethereum (Eth) from Layer 1 (L1) to Layer 2 (L2). There is a special message type specifically for Eth deposits. When an Eth deposit is made, the Eth will be sent to the same address on L2 as the sender's address on L1. If the sender on L1 is an externally owned account (EOA), the Eth will be deposited to the same EOA address on L2. If the sender on L1 is a contract, the funds will be deposited to the contract's aliased address on L2.\n\n#### Transacting via the Delayed Inbox\n\nTo transact via the delayed inbox, both retryable tickets and Eth deposits must be submitted through it. The delayed inbox is a necessary recourse to ensure censorship resistance on the Arbitrum chain, even if the Sequencer misbehaves. However, under normal circumstances, it is recommended to use the delayed inbox only for retryables and Eth deposits. For all other messages, it is recommended to transact via the Sequencer.\n\n## Address Aliasing\n\nWhen messages are submitted via the delayed inbox, the sender's address is \"aliased.\" This means that when these unsigned messages are executed on L2, the sender's address will not be the same as the L1 address that sent the message. Instead, it will be the address's \"L2 Alias.\" An address's L2 alias is calculated by increasing its value by the hex value `0x1111000000000000000000000000000000001111`.\n\n#### The Purpose of Address Aliasing\n\nThe use of L2 aliases for L1-to-L2 messages in the Arbitrum protocol serves an important purpose. It prevents cross-chain exploits that could occur if the same L1 addresses were reused as the L2 sender. By using L2 aliases, it becomes much more difficult to trick an L2 contract that expects a call from a specific contract address by sending a retryable ticket from the expected contract address on L1. This adds an extra layer of security and prevents potential vulnerabilities in the system.",
      "name": "Other Concepts",
      "stepItems": [],
      "uuid": "47dca17b-42d8-43ff-a8ae-894f128e993e"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "895f2692-d815-4d2a-9fec-59ae56ce5179"
    },
    {
      "content": "Arbitrum's L2 to L1 communication system allows for messages to be sent from its second-layer solution back to the main Ethereum blockchain, which is the first layer (L1). This system is designed somewhat like a mirror image of the process that sends messages from L1 to L2, but with specific differences tailored for the reverse direction.\n\n## Protocol Flow\nEvery time a new set of transactions is processed on Arbitrum's L2, a snapshot of certain information is taken. This snapshot includes a cryptographic summary called a Merkle root that uniquely represents all the L2 to L1 messages sent up to that point. After this snapshot is captured in a proposed block, it goes through a waiting period—often about a week—before it's fully confirmed. This waiting period is crucial for ensuring the security and finality of the transactions.\n\n## Client Flow \nWhen a user on Arbitrum's Layer 2 (L2) wants to send a message to Ethereum's main layer (Layer 1 or L1), they start by calling the `sendTxToL1` method on the L2 ArbSys precompile contract. This message is bundled into an assertion, a group of transactions processed by Arbitrum, and is typically included within about an hour. The assertion then goes through a confirmation period of about a week for security verification. After confirmation, the user must obtain a Merkle proof, which is done by calling the `constructOutboxProof` function on Arbitrum's NodeInterface contract. With this proof, the user approaches the Outbox contract on L1 and calls `executeTransaction`, providing the proof to execute their message on the Ethereum mainnet, completing the cross-layer communication process.",
      "name": "L2 to L1 Messaging",
      "stepItems": [],
      "uuid": "9e939755-5c98-45a0-8335-cdd8adb16734"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "a8ed5c86-cc78-469c-ab98-aac3701cf5d5"
    },
    {
      "content": "## Important Design Features\n\nProtocol design details are crucial in ensuring the smooth and efficient functioning of a system. \n\n#### Contant Overhead of Calls \nIn the case of the Outbox system, one important aspect of its design is the constant overhead of calls to confirmNode. This means that regardless of the number of outgoing messages or the gas cost of executing them on L1, the cost of confirming nodes remains constant. This design choice prevents the RBlock confirmation process from being disrupted or manipulated.\n\n#### Long Delay Period\nThe week-long delay period before outgoing messages can be executed is an inherent characteristic of Arbitrum Rollup and similar Optimistic Rollup style L2 solutions. This delay is necessary to allow time for Arbitrum validators to detect and prove any faults that may occur. While the result of a transaction can be anticipated as soon as it is published on-chain, Ethereum itself requires this delay period to accept the result and ensure the integrity of the protocol.\n\n#### Virtual Contracts\nIn the context of the system, the NodeInterface is referred to as a \"virtual\" contract. Its methods can be accessed through specific calls, but it does not actually exist on the blockchain like a regular contract. It functions similarly to a precompile, which is a built-in contract in Ethereum that cannot receive calls from other contracts. This clever design choice allows for the inclusion of Arbitrum-specific data without the need for implementing a custom RPC (Remote Procedure Call) mechanism.\n\n## Difference between Outbox and Retryables\n\n#### Automatic Execution\nUnlike Retryables, which allow for automatic L2 execution by providing Ether, outgoing messages in the Outbox system do not have the capability for in-protocol automatic L1 execution. This is because Ethereum itself does not offer scheduled execution features. However, it is possible to build application-layer contracts that interact with the Outbox and provide similar functionality through an \"execution market\" approach. This would allow for outsourcing the final L1 execution step.\n\n#### Lifespan\nAnother difference between outgoing messages and Retryables is their lifetime. Retryables have a limited lifespan and must be redeemed or have their lifetime extended before a certain deadline. On the other hand, L2 to L1 messages in the Outbox system are stored in L1 state and persist permanently without any specific deadline for execution.",
      "name": "Protocol Design Details",
      "stepItems": [],
      "uuid": "5b8bc743-4417-4f4c-b85d-1e2ef5174150"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "dbaea1cf-22eb-4c4d-96b6-106ba0c7d26a"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/cross_chain_messaging_arbitrum_university_977/1699877869240_rectangle_101.png",
  "uuid": "cross-chain-messaging-arbitrum-university-977",
  "version": 1,
  "priority": 50
}