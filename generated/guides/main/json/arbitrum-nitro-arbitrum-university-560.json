{
  "categories": [],
  "content": "A deeper look into Arbitrum Nitro",
  "created": "2023-11-22T18:25:43.057Z",
  "guideType": "onboarding",
  "key": "arbitrum-nitro-arbitrum-university-560",
  "name": "Arbitrum Nitro ",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "## What is Arbitrum Nitro?\n\nArbitrum Nitro is a significant technical upgrade for Arbitrum, which is a Layer 2 scaling solution for Ethereum. It aims to lower transaction fees and increase the processing capacity of Ethereum by moving contract computation and storage from the primary chain. This upgrade, known as Nitro, is designed to be more compatible with the Ethereum Virtual Machine (EVM) and provides a better user experience with lower fees and faster transactions. With Nitro, Arbitrum aims to push the boundaries of security, efficiency, and scalability, offering a promising solution for the future of Ethereum. \n\n<div align=\"center\">\n  <img style=\"max-height:600px;margin-bottom:40px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_nitro_arbitrum_university_560/1700677384029_nitro.png\"/>\n</div>\n\nIt introduces advanced calldata compression, reducing transaction costs even further. Nitro enhances the performance of Layer 1 (L1) nodes, aligns EVM operation pricing with Ethereum, and introduces additional synchronization with Ethereum L1 blocks. As it seamlessly supports the Ethereum Virtual Machine (EVM), no hefty modifications are required. With Nitro, transactions on Arbitrum have become extremely efficient. \n\n## Innovative Features of Arbitrum Nitro\n\n#### WebAssembly Code\n\nNitro introduces a new prover that uses WebAssembly (WASM) code to perform Arbitrum's interactive fraud proofs. This upgrade enhances the scalability and efficiency of the system, allowing for thousands of transactions to be processed per second. Despite being a separate blockchain, Arbitrum Nitro maintains the security and privacy features of Ethereum's Layer 1 (L1) and relays all transaction information to the main Ethereum chain.\n\n<div align=\"center\">\n  <img style=\"max-height:600px;margin-bottom:40px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_nitro_arbitrum_university_560/1700677415896_features.png\"/>\n</div>\n\n#### EVM Compatiblility\n\nDevelopers can easily integrate Arbitrum Nitro without making any modifications because it supports the EVM. This means that existing Ethereum contracts and transactions can run on Arbitrum without any changes. This distinguishes Arbitrum Nitro from other layer 2 solutions as each have their own VMs thereby requiring modifications for integration. \n\n#### Deterministic Transactions\n\nTo use Arbitrum Nitro, users need to submit their transactions to the chain's inbox. The chain will then execute the transaction and produce outputs, including a transaction receipt and any initiated withdrawals. The execution of transactions is deterministic, meaning that the result is known as soon as the transaction is placed in the inbox. Arbitrum ensures the correctness of the chain state and outputs, supports Ethereum-compatible contracts and transactions, and manages the transfer and management of ETH and tokens on the chain. ",
      "name": "Introduction to Arbitrum Nitro",
      "stepItems": [],
      "uuid": "71f23120-3f81-446c-9d03-fe061903a797"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "label": "Full Name",
          "required": false,
          "type": "PublicShortInput",
          "uuid": "c3f60710-b204-4c63-bd7c-809389c6735f"
        },
        {
          "answerKeys": [
            "choice_1",
            "choice_2",
            "choice_3"
          ],
          "choices": [
            {
              "content": "Choice 1",
              "key": "choice_1"
            },
            {
              "content": "Choice 2",
              "key": "choice_2"
            },
            {
              "content": "Choice 3",
              "key": "choice_3"
            },
            {
              "content": "Choice 4",
              "key": "choice_4"
            }
          ],
          "content": "Contents of the question",
          "type": "MultipleChoice",
          "uuid": "4f6183f2-289d-45f2-bebd-8f1661846cf5",
          "explanation": "Explanation of the question"
        }
      ],
      "uuid": "40dd8254-e6e1-4dd7-9e68-34f14bf45792"
    },
    {
      "content": "Here is the comparison between Arbitrum Nitro and Arbitrum Classic (original version of Arbitrum):\n\n| Feature                                  | Arbitrum Classic                                              | Arbitrum Nitro                                                  |\n|------------------------------------------|---------------------------------------------------------------|-----------------------------------------------------------------|\n| Goal                                     | Execution environment resembling EVM as second layer to Ethereum | Execution environment resembling EVM as second layer to Ethereum |\n| Virtual Machine Used                     | Arbitrum Virtual Machine (AVM)                                  | WebAssembly (Wasm)                                              |\n| Low-Level Instructions                   | Uses AVM for low-level instructions                             | Compiles Go code to WASM for low-level instructions             |\n| Architecture                             | Relies on AVM for execution environment                         | Direct usage of Geth's EVM implementation, enhancing efficiency |\n| Gas Fees and Ethereum Compatibility      | Higher fees compared to Nitro, due to less optimized execution environment | Lower fees and better Ethereum compatibility due to native execution of Go code |\n| Codebase Simplicity                      | More complex due to custom AVM, posing higher technical risks   | Simpler and more accessible codebase, reducing technical risks  |\n| Coding Languages                         | Solidity or Vyper                                                | Go (a more common language)                                     |\n| Code Conversion                          | EVM bytecode converted to AVM bytecode                           | Uses Wasm only when there's a dispute                           |\n| Transaction Management and Fraud Proofs  | AVM bytecode runs transactions and generates fraud proofs        | Checkpoints summarize transactions; Wasm used for disputes      |\n| Dispute Resolution                       | Validators inspect AVM bytecode in case of disputes              | Validators agree on block before examining Wasm details         |\n| Efficiency and Resource Management       | Less efficient, prepares for problems even if they do not occur  | More efficient, converts to Wasm only during disputes, saving time and resources |\n",
      "name": "Nitro vs Classic",
      "stepItems": [],
      "uuid": "488abfeb-0e2c-472d-88cf-8fbc888963ee"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "ca041520-b639-4eab-b2c7-37b09560b6ea"
    },
    {
      "content": "## How Transactions Work?\n\nDesigned to enhance efficiency and streamline workflows, the Nitro design emerges as an evidence to innovation in the Ethereum ecosystem. The transaction pocess in Arbitrum Nitro technology consists of the following cricial steps:\n\n<div align=\"center\">\n  <img style=\"max-height:600px;margin-bottom:40px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_nitro_arbitrum_university_560/1700677469815_transaction_lifecycle.png\"/>\n</div>\n\n#### Step 1: Sequencing and Deterministic Execution\n\nWhen a user sends a transaction on the Nitro chain, it is signed with their wallet and given to the Sequencer. The Sequencer orders transactions and publishes them, after which they're processed to update the Nitro chain state, producing Layer 2 blocks as needed. Invalid transactions are rejected to keep the sequence authentic. The Sequencer uses a real-time alert system for immediate soft finality and batches transactions on the Ethereum chain for hard finality. The latter involves compressing transactions using \"brotli\" and posting them to Ethereum, where their finalization ensures the sequence's immutability on Nitro.\n\n#### Step 2: State Transition Function\n\nIn Arbitrum Nitro's transaction lifecycle, the State Transition Function (STF) is crucial for updating the blockchain's state. Once a transaction is submitted, it enters the Nitro system either through a Sequencer or directly into the inbox. The STF then processes these transactions, taking the current state and the transaction data to compute a new state. It performs all the necessary calculations and state alterations in a deterministic manner, such as adjusting account balances and modifying smart contract states. This transition is then reflected on the chain, with the STF ensuring that the state progresses correctly and consistently after each transaction, maintaining the integrity and continuity of the blockchain's ledger.\n\n#### Step 3: Posting on Layer 1\n\nIn Arbitrum Nitro's transaction lifecycle, data posting on Layer 1 is where transaction inputs are recorded as calldata on the Ethereum blockchain, allowing for full transparency and enabling anyone to reconstruct the chain's state. This process supports the network's optimistic rollup approach, where validators post proposed rollup blocks to Layer 1, which are assumed correct unless challenged within a roughly one-week period. If unchallenged, the block is confirmed, but disputed blocks trigger Arbitrum's dispute resolution protocol to determine accuracy, penalizing dishonest validators with deposit forfeiture. This design ensures the integrity of posted data while minimizing fraud.\n\n## Nitro Under the Hood\n\nArbitrum Nitro's innovative architecture is designed to streamline both the execution of smart contracts and the verification process in case of disputes. Central to this architecture is the implementation of \"geth at the core,\" which utilizes go-ethereum, the commonly used Ethereum node software, written in the Go programming language. This foundational approach is manifested in a layered structure. Nitro harnesses the power of this setup to optimise performance while maintaining the robustness of security and verification processes.\n\n### Layers of Nitro Node\n\nNitro utilizes the same source code for two distinct tasks: execution and proving, by employing \"geth at the core.\" The Nitro node software, predominantly written in Go like go-ethereum (geth), consists of three main layers—the base layer with core geth functionalities, the middle layer called ArbOS providing Layer 2 features, and the top layer handling node operations, also derived from geth. This layered design forms the \"geth sandwich,\" with geth as the bread and ArbOS as the filling.\n\n<div align=\"center\">\n  <img style=\"max-height:600px;margin-bottom:40px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_nitro_arbitrum_university_560/1700677506703_layers.png\"/>\n</div>\n\n### Dual Compilation Strategy\n\nFor execution, the source code is compiled into native code using the standard Go compiler, customized for the specific architecture of the node deployment. In contrast, for proving—particularly important when disputes arise—the same source code, especially the State Transition Function (STF), is compiled to WebAssembly (WASM), a portable machine code format. This WASM code is then transformed into WAVM, a modified version for proof procedures. When a dispute occurs, the verification of the STF's results is conducted with reference to the WAVM code, ensuring that the same logic governs both normal operation and the verification process during disputes.",
      "name": "Arbitrum Nitro Design ",
      "stepItems": [],
      "uuid": "fc866114-3380-41da-a037-351a9246246a"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "e49c619f-5960-4060-9b89-cdd09521cf36"
    },
    {
      "content": "- https://docs.arbitrum.io/why-nitro\n\n- https://docs.arbitrum.io/inside-arbitrum-nitro/#:~:text=Nitro%20is%20a%20major%20upgrade,of%20data%20posted%20to%20L1\n\n- https://medium.com/offchainlabs/arbitrum-nitro-one-small-step-for-l2-one-giant-leap-for-ethereum-bc9108047450\n\n- https://chainstack.com/arbitrum-nitro-an-overview/#3-nitro-vs-classic\n\n",
      "name": "References",
      "stepItems": [],
      "uuid": "d10846b3-3be8-43e0-9e3b-c8a48b29b98a"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_nitro_arbitrum_university_560/1699877538895_rectangle_95.png",
  "uuid": "arbitrum-nitro-arbitrum-university-560",
  "version": 1,
  "priority": 95
}