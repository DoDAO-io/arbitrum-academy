{
  "categories": [],
  "content": "A deeper look into Arbitrum Nitro",
  "created": "2023-11-08T12:24:40.821Z",
  "guideType": "onboarding",
  "key": "arbitrum-nitro-arbitrum-university-560",
  "name": "Arbitrum Nitro ",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "## Arbitrum Nitro\n\nArbitrum Nitro is a significant technical upgrade for Arbitrum, which is a Layer 2 scaling solution for Ethereum. It aims to lower transaction fees and increase the processing capacity of Ethereum by moving contract computation and storage from the primary chain. This upgrade, known as Nitro, is designed to be more compatible with the Ethereum Virtual Machine (EVM) and provides a better user experience with lower fees and faster transactions. With Nitro, Arbitrum aims to push the boundaries of security, efficiency, and scalability, offering a promising solution for the future of Ethereum. \n\nIt introduces advanced calldata compression, reducing transaction costs even further. Nitro enhances the performance of Layer 1 (L1) nodes, aligns EVM operation pricing with Ethereum, and introduces additional synchronization with Ethereum L1 blocks. As it seamlessly supports the Ethereum Virtual Machine (EVM), no hefty modifications are required. With Nitro, transactions on Arbitrum have become extremely efficient. \n\n## Nitro Vs Classic\n\n\n**In Classic Arbitrum (old system):**\n- You write code in Solidity or Vyper (these are programming languages used for Ethereum).\n- This code is converted into a special format (EVM bytecode) that Ethereum can understand.\n- ArbOS (the system managing Arbitrum transactions) changes this format again into something the Arbitrum system can work with (AVM bytecode).\n- This AVM bytecode does two jobs: it runs transactions and helps prove if someone is cheating (fraud proofs).\n- If there's a disagreement about a transaction, validators (who are like referees) look at the AVM bytecode closely to figure out who's right.\n\n**In Nitro Arbitrum (new system):**\n- Similar to Classic, but it uses a more common language (Go) and a universal format (WebAssembly, or Wasm) which many systems understand.\n- Nitro creates checkpoints (think of them as save points in a game) that summarize transactions into blocks, much like Ethereum.\n- If there's a dispute, validators first agree on which block they're arguing about before digging into the details with Wasm.\n- This means that Nitro only does the heavy lifting of converting to Wasm when there's a disagreement, which doesn't happen often.\n- Normally, Nitro just runs transactions in the simplest way possible without converting anything, which is quicker and cheaper.\n- This makes Nitro more efficient because it doesn't prepare for problems unless they actually happen, saving time and resources.\n\n\n#### WebAssembly Code\n\nNitro introduces a new prover that uses WebAssembly (WASM) code to perform Arbitrum's interactive fraud proofs. This upgrade enhances the scalability and efficiency of the system, allowing for thousands of transactions to be processed per second. Despite being a separate blockchain, Arbitrum Nitro maintains the security and privacy features of Ethereum's Layer 1 (L1) and relays all transaction information to the main Ethereum chain.\n\n#### EVM Compatiblility\n\nDevelopers can easily integrate Arbitrum Nitro without making any modifications because it supports the EVM. This means that existing Ethereum contracts and transactions can run on Arbitrum without any changes. The goal of Arbitrum Nitro is to provide a trustless and scalable solution for Ethereum, offering benefits such as trustless security, compatibility with Ethereum, scalability, and minimum cost.\n\n#### Deterministic Transactions\n\nTo use Arbitrum Nitro, users need to submit their transactions to the chain's inbox. The chain will then execute the transaction and produce outputs, including a transaction receipt and any initiated withdrawals. The execution of transactions is deterministic, meaning that the result is known as soon as the transaction is placed in the inbox. Arbitrum ensures the correctness of the chain state and outputs, supports Ethereum-compatible contracts and transactions, and manages the transfer and management of ETH and tokens on the chain. ",
      "name": "What is Arbitrum Nitro?",
      "stepItems": [],
      "uuid": "71f23120-3f81-446c-9d03-fe061903a797"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "label": "Full Name",
          "required": false,
          "type": "PublicShortInput",
          "uuid": "c3f60710-b204-4c63-bd7c-809389c6735f"
        },
        {
          "answerKeys": [
            "choice_1",
            "choice_2",
            "choice_3"
          ],
          "choices": [
            {
              "content": "Choice 1",
              "key": "choice_1"
            },
            {
              "content": "Choice 2",
              "key": "choice_2"
            },
            {
              "content": "Choice 3",
              "key": "choice_3"
            },
            {
              "content": "Choice 4",
              "key": "choice_4"
            }
          ],
          "content": "Contents of the question",
          "type": "MultipleChoice",
          "uuid": "4f6183f2-289d-45f2-bebd-8f1661846cf5",
          "explanation": "Explanation of the question"
        }
      ],
      "uuid": "40dd8254-e6e1-4dd7-9e68-34f14bf45792"
    },
    {
      "content": "## The Key Nitro Design Ideas\n\nDesigned to enhance efficiency and streamline workflows, the Nitro design emerges as an evidence to innovation in the Ethereum ecosystem. It is based on four big idea:\n\n#### Sequencing and Deterministic Execution\n\nWhen a user initiates a transaction, it is signed using their wallet and then dispatched to the Nitro chain's Sequencer. The Sequencer organizes the incoming transactions sequentially and publishes this sequence. Following this, transactions are systematically processed through a state transition function, updating the state in relation to factors like account balances and contract codes, occasionally emitting a new Layer 2 block on the Nitro chain. To maintain integrity, this function discards any improperly formed transactions, ensuring the authenticity of the sequence. This system's deterministic nature ensures that the outcome of a transaction depends solely on its input state, preceding transactions in the sequence, and the transaction itself. Therefore, any party with access to this transaction sequence can independently compute the state transition function and achieve consistent results, eliminating the need for any consensus mechanism.\n\nThe Sequencer manages the distribution of transaction sequences in two ways: a real-time notification system and periodic batches on the L1 Ethereum chain. The real-time system alerts subscribers immediately about each transaction. They can connect directly to the Sequencer or use a relay. This offers \"soft finality\" based on the Sequencer's commitment to order. For stronger finality, the Sequencer groups transactions, compresses them with the \"brotli\" algorithm, and uploads them to the L1 Ethereum chain. When these transactions are finalized on Ethereum, they also achieve \"hard finality\" on Layer 2 Nitro, solidifying their sequence.\n\n#### Based on Go-Ethereum\n\n\"Geth,\" short for go-ethereum, represents the predominant node software for Ethereum, developed predominantly in the Go programming language, mirroring the core architecture of Nitro. The intricate structure of Nitro can be visualized as a \"geth-sandwich,\" comprised of three distinct layers. The foundational base layer embodies the core facets of Geth, emphasizing the emulation of EVM contracts and the management of Ethereum's state structures. Nitro seamlessly integrates this code as a library, applying minimal modifications to introduce essential functionalities.\n\nThe middle layer, termed ArbOS, is a custom-built segment designed to extend features specific to Layer 2 functionality. These include parsing and decompressing the Sequencer's data batches, managing Layer 1 gas expenditures, orchestrating cross-chain bridge operations, and more. Complementing this, the top layer largely derives from geth, tasked with handling connections, addressing incoming RPC client requests, and fulfilling other paramount operations essential for an Ethereum-compatible blockchain node. This multi-layered approach, with Geth forming both the top and bottom layers (akin to bread in a sandwich), has led to the adoption of the \"geth-sandwich\" nomenclature.\n\n#### Separate Execution and Proving\n\nDesigning a practical rollup system often encounters the challenge of balancing efficient system performance with the ability to conclusively verify execution outcomes. Nitro addresses this challenge by utilizing identical source code for both execution and verification but targeting different compilation outputs. For execution, Nitro's node software is compiled using the standard Go compiler, producing native code tailored to various deployment architectures. On the other hand, for verification purposes, the segment of the code identified as the State Transition Function (STF) is compiled into WebAssembly (wasm) using the Go compiler. This wasm code subsequently undergoes transformation into a modified format named WAVM, which is optimized for proof procedures.\n\nWasm, while effective for fraud proofs due to its features, needs modifications for Nitro's objectives. Thus, Nitro presents WAVM which is a refined wasm version. WAVM adjusts certain wasm characteristics, introduces restrictions, and adds new opcodes for better blockchain integration. Notably, the \"ReadPreImage\" instruction in WAVM fetches data from a known hash's Merkle representation, enabling the STF to access and alter the state tree using just its root hash. This approach, known as the \"hash oracle trick\" and rooted in the original Arbitrum design, relies on participants to store full data structures for content retrieval.\n\n#### Optimistic Rollup\n\nArbitrum operates as a rollup, wherein the inputs to the chain, specifically the messages funneled into the inbox, are recorded on the Ethereum chain as calldata. This ensures that all participants possess the essential data to deduce the chain's current correct state. Since outcomes are exclusively determined by the inbox history, one can reconstruct the chain state using only public information. As a result, this transparent structure empowers any individual to actively engage in the Arbitrum protocol, whether by running an Arbitrum node or acting as a validator.\n\nThe term 'optimistic' in Arbitrum's framework implies that the chain's state progression is driven by a trust-but-verify mechanism. Essentially, any party, termed a “validator”, can assert a rollup block's correctness on Layer 1, leaving a window for others to dispute this assertion. If unchallenged within the designated period (approximately a week), the rollup block is affirmed as valid. However, should a contention arise, Arbitrum employs a robust dispute resolution mechanism to discern the truth. Misleading parties risk forfeiting deposits, which not only discourages deceit but also rewards honest participants, thereby bolstering the system's integrity. In most scenarios, the uncontested submission of a correct rollup block is anticipated, minimizing disputes.\n",
      "name": "Arbitrum Nitro Design ",
      "stepItems": [],
      "uuid": "fc866114-3380-41da-a037-351a9246246a"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "e49c619f-5960-4060-9b89-cdd09521cf36"
    },
    {
      "content": "## Dispute Resolution\n\nInteractive fraud proofs are a crucial aspect of optimistic rollups, which are a type of blockchain design. When disputes arise between participants, there are two main options to resolve them: interactive proving or re-executing transactions. In the case of Arbitrum, interactive proving is used because it is considered more efficient and flexible.\n\n#### Interactive Fraud Proof\n \nThe concept behind interactive proving is that the participants in the dispute engage in a back-and-forth protocol. This protocol is overseen by a contract on the main Ethereum chain (L1 contract) and aims to resolve the dispute with minimal work required from the L1 contract. \n\n#### Process of Interactive Fraud Proof\n\nTo begin the process, if a party claims that the chain will produce a certain result, they will post two claims of smaller size that combine to yield their initial claim. The other party then chooses one of their claims to challenge. This process continues, cutting the dispute in half at each stage, until they are disagreeing about a single step of execution. At this point, the L1 referee examines the instruction and determines whether the first party's claim is correct.\n\n## Advantages of Interactive Fraud proof\n\n#### Greater Efficiency\n\nThe key principle behind interactive proving is that both parties should do as much work as possible off-chain to resolve their dispute. This approach is more efficient than re-executing transactions because it allows a rollup block to contain only a single claim about the end state of the chain, rather than requiring a state claim for each transaction within the block. This reduces the L1 footprint and overall cost.\n\n#### Quicker Actions\n\nInteractive proving also has advantages in the pessimistic case. The L1 referee only needs to check that both the parties' actions have the right shape, rather than emulating the execution of an entire transaction. This saves computational resources and time. Additionally, interactive proving allows for a higher gas limit per transaction, which can be beneficial in certain scenarios.\n\n#### Higher Flexibility\n\nInteractive proving offers more implementation flexibility compared to reexecution approaches. It only requires the ability to verify a one-step proof on Ethereum, whereas reexecution is limited by the capabilities of the Ethereum Virtual Machine (EVM). The design of Arbitrum is heavily influenced by the opportunities presented by interactive proving.",
      "name": "Dispute Resolution in Nitro",
      "stepItems": [],
      "uuid": "664a3e8e-12ae-44f4-a078-025b15e01c10"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "0bf49cd7-6692-4004-9742-d436f3924da3"
    },
    {
      "content": "## Comparing Nitro and Classic\nWhen comparing Nitro and Classic, it is important to understand their similarities and differences. Both Nitro and Classic aim to create an execution environment that closely resembles the Ethereum Virtual Machine (EVM) as a second layer to Ethereum. However, they use different approaches to achieve this.\n\n####  Different Virtual Machines\n\nClassic uses the Arbitrum Virtual Machine (AVM), a custom-made virtual machine, to establish the execution environment. On the other hand, Nitro utilizes WebAssembly (Wasm) for low-level instructions. It compiles the Go code to WASM and includes the widely used Ethereum implementation, Geth, within the ArbOS program.\n\n####  Architectural Differences\n\nThe architecture of Nitro is its defining feature. It allows for direct usage of Geth's EVM implementation, making it more efficient and performant. In contrast, Classic relies on the AVM for low-level instructions. This architectural difference leads to several benefits for Nitro.\n\n####  Gas Fee and Ethereum Compatibility\n\nOne of the main benefits of Nitro is lower fees. By optimizing the execution environment and leveraging native execution of Go code, Nitro reduces the cost of transactions for end users. Additionally, Nitro offers better Ethereum compatibility. It inherits the compatibility of Geth, making it easier for clients to interact with the system.\n\n####  Simplicity of Codebase\n\nSimplicity is another advantage of Nitro. By using Geth and incorporating widely used compression libraries, Nitro simplifies the codebase and reduces technical risks. This simplicity makes Nitro more accessible for auditors and contributors, ensuring a higher level of implementation security.",
      "name": "Nitro vs Classic",
      "stepItems": [],
      "uuid": "488abfeb-0e2c-472d-88cf-8fbc888963ee"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "ca041520-b639-4eab-b2c7-37b09560b6ea"
    },
    {
      "content": "- https://docs.arbitrum.io/why-nitro\n\n- https://docs.arbitrum.io/inside-arbitrum-nitro/#:~:text=Nitro%20is%20a%20major%20upgrade,of%20data%20posted%20to%20L1\n\n- https://medium.com/offchainlabs/arbitrum-nitro-one-small-step-for-l2-one-giant-leap-for-ethereum-bc9108047450\n\n- https://chainstack.com/arbitrum-nitro-an-overview/#3-nitro-vs-classic\n\n",
      "name": "References",
      "stepItems": [],
      "uuid": "d10846b3-3be8-43e0-9e3b-c8a48b29b98a"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi",
  "uuid": "arbitrum-nitro-arbitrum-university-560",
  "version": 1,
  "priority": 50
}