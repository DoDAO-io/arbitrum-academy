{
  "categories": [],
  "content": "Exploring Arbitrum Orbit: The Next Frontier in Layer-2 Solutions",
  "created": "2023-11-10T11:53:53.532Z",
  "guideType": "onboarding",
  "key": "arbitrum-orbit-arbitrum-university-525",
  "name": "Arbitrum Orbit",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "## What is Orbit?\nArbitrum Orbit enables the creation of private blockchain chains with customizable features, such as governance and fee structures, which settle transactions on Arbitrum's Layer 2 ecosystems like Arbitrum One or Nova. It utilizes the Arbitrum Nitro technology stack, offering benefits like Nitro's fraud proofs, advanced data compression, and EVM+ compatibility, while also allowing for ongoing upgrades from the Nitro stack developments. Orbit chains can be tailored for specific applications or broader use cases, offering gas price stability, permissioned access, and the choice between Rollup or AnyTrust protocols. Governance is independently determined by the chain creators, providing a flexible, scalable, and secure platform for hosting a range of dApps or private EVM-compatible smart contracts, with the ability to incrementally adopt Ethereum's security features.\n\n## Benefits of Orbit\nArbitrum Orbit addresses several key challenges within the Ethereum ecosystem:\n\n**1. Scalability:** Orbit facilitates scalability by allowing the creation of multiple chains. This helps alleviate scaling challenges by distributing activities across various environments, each with its own resource management, thereby easing bottlenecks that could arise on a single chain.\n\n**2. Flexible Security Models**: With Orbit, developers can implement and test different security models to find the right balance for their projects. For instance, while Arbitrum One offers a fully trustless environment, Arbitrum Nova provides an option to optimize for lower fees with a mild trust assumption. Orbit extends this flexibility, making experimentation with security tradeoffs more accessible.\n\n**3. Flexible Execution Environments**: Orbit chains allow for customized execution environments. While maintaining full EVM compatibility, Orbit chains can also limit smart contract functionalities to better serve specific project requirements, leading to optimized performance.\n\n**4. Flexible Governance**: Developers have the autonomy to establish their own governance mechanisms on Orbit chains, which can be tailored to suit the unique needs of their projects, communities, or stakeholders.\n\n**5. Increased Adoption of dApps**: Orbit lowers barriers to progressive decentralization, making it more feasible for developers to launch decentralized applications. It enables a new breed of dApps that benefit from being built in more autonomous, self-managed conditions, potentially increasing the adoption and diversity of dApps within the blockchain space.",
      "name": "Introduction to Orbit",
      "stepItems": [],
      "uuid": "16adea27-d0a8-4a7b-99aa-c7635f4cd221"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "label": "Full Name",
          "required": false,
          "type": "PublicShortInput",
          "uuid": "8057ffff-5953-4d13-be00-1a462febb9d1"
        },
        {
          "answerKeys": [
            "choice_1",
            "choice_2",
            "choice_3"
          ],
          "choices": [
            {
              "content": "Choice 1",
              "key": "choice_1"
            },
            {
              "content": "Choice 2",
              "key": "choice_2"
            },
            {
              "content": "Choice 3",
              "key": "choice_3"
            },
            {
              "content": "Choice 4",
              "key": "choice_4"
            }
          ],
          "content": "Contents of the question",
          "type": "MultipleChoice",
          "uuid": "a34afef3-148a-4e79-8f14-fe0aae2c90f7",
          "explanation": "Explanation of the question"
        }
      ],
      "uuid": "62a5e58f-54fa-45d3-ba27-92d8ab5f9a40"
    },
    {
      "content": "## Orbit Licensing \nThe licensing for Arbitrum Orbit chains is designed to provide both security and flexibility for developers using the Arbitrum Nitro codebase. When you create an Orbit chain, you receive a license that is both perpetual, meaning it cannot be revoked, and recursive, allowing your Orbit chain to host further chains under the same licensing terms. This ensures that once you've developed your Orbit chain, you retain unfettered and ongoing access to the software, and you can extend these rights to additional chains created within your Orbit chain's ecosystem.\n\nHowever, this license applies specifically to chains that settle to an Arbitrum-DAO-governed chain. If you wish to establish an independent Layer 2 chain on Ethereum that does not settle to an Arbitrum-DAO chain, you must obtain a separate license. For this, you have two avenues:\n\n**1. Offchain Labs**: You can directly request a custom license from Offchain Labs, the original developers of the Arbitrum Nitro codebase and the primary licensor.\n\n**2. Arbitrum DAO Proposal**: Alternatively, you can submit a proposal to the Arbitrum DAO, which has been granted co-licensor rights. The DAO will then make a democratic decision on whether to grant a license for your new L2 chain.\n\n## How to customize your Orbit chain's deployment configuration?\nTo customize your Orbit chain's configuration, follow these steps when you access the Orbit chain deployment portal:\n\n### Step1: Access the Deployment Portal\nNavigate to the Orbit chain deployment portal where you'll launch your new Orbit chain. You will encounter a form with various configuration fields. This form typically comes with default values that are suitable for many cases but can be customized.\n\n### Step 2: Update Information\nFor devnets, the Chain ID is automatically assigned and isn't crucial. In production, you'll choose a unique integer identifier that hasnâ€™t been used on chain indexes like Chainlist.org. Enter a distinctive name for your Orbit chain that is easily recognizable to your users and developers.\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1699614157534_screenshot_2023-11-10%20at%204.01.25%20pm.png\"/>\n</div>\n\n### Step 3: Customise Specifications\nDecide on the Challenge period in blocks, balancing the time validators have to dispute states against the withdrawal delay for users. This is measured in blocks of the underlying L1 chain. Specify the token for validators to use as a stake, using the token's contract address on the L2 chain to which your Orbit chain settles, or use the address for ETH if that's the chosen stake token. Set the Base stake amount, considering that a lower stake lowers the barrier to entry but may increase vulnerability to attacks, while a higher stake deters attacks but raises the barrier to validator participation.\n\n### Step 4: Owner\nProvide the account address that will own and manage the Orbit chain's base contracts. In a production environment, this address might be governed by a DAO or a multisig, but for a devnet, it can be a standard Ethereum wallet address. Carefully review the default values and modify them based on the needs and security considerations of your project. Once you've finalized the configuration values, proceed with the deployment, ensuring that the Owner address has sufficient ETH to cover gas costs for contract deployment on L2.\n\nBy customizing these settings, you can tailor your Orbit chain to the specific requirements of your application, balancing security, participation, and administrative control according to your project's needs.",
      "name": "Orbit Ownership",
      "stepItems": [],
      "uuid": "dc9130cc-0a1c-4d6c-8f47-06622f53d0ef"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "3f7ccfec-7f60-48c2-a0dd-4a1df45eb790"
    },
    {
      "content": "## Steps to launch an Orbit Chain\n\n### Prerequisites\n\n- Docker\n\n- A browser-based Ethereum wallet (like MetaMask)\n\n- At least 1.5 testnet ETH\n\n### Step 1: Aqcuire Arbitrum Testnet $ETH\nTo initiate your Orbit chain, a minimum of 1.5 testnet ETH is required to fund the deployment of the foundational contracts to the chosen base chain, which can be either Arbitrum Goerli or Sepolia. With Sepolia being the preferred choice due to the planned obsolescence of Goerli, you should secure your testnet ETH from an Ethereum Layer 1 faucet for either Goerli or Sepolia. Once obtained, you can transfer your L1 testnet ETH to the corresponding Arbitrum Layer 2 testnet through the Arbitrum bridge.\n\n### Step 2: Choose Chain Type: Anytrust vs Roll up\nArbitrum Rollup ensures a secure, open validation process by storing data on Ethereum L1, while Arbitrum AnyTrust reduces fees through a trusted Data Availability Committee managing data off-chain. Rollup chains are recommended for highly secure applications such as DeFi platforms, while AnyTrust is better suited for transaction-intensive applications like games and social dApps that prioritize lower fees. Then Configure the orbit chain's deployment using the step by step guide available in the previous slide.\n\n### Step 3: Configure Validators and batch Poster\nIn the Configure Validators section of the Orbit chain deployment, you'll specify the number of validators and their addresses for your chain. The first validator's address is auto-generated, with its private key saved in a configuration file. These validators will ensure transaction integrity and manage the state of your Orbit chain on the base chain. They will be included in an allow-list on your chain's base contract, granting them permission to stake and validate. The terms \"base contracts\" and \"base chain\" refer to the L2 contracts of your Orbit chain and the L2 network they're deployed on, respectively. After setting up validators, you'll move on to configure the batch poster. In the Configure Batch Poster section, an address for the batch poster will be auto-generated, responsible for posting transaction batches from your Orbit chain to its base chain's contracts. Its private key is also auto-generated and stored in a JSON configuration file. After configuring this address, you proceed to the next deployment phase of your Orbit chain.\n\n### Step 4: Deploye Orbit Chain\nTo deploy your Orbit chain's base contracts, click the Deploy button on the configuration form, which prompts a transaction submission to the Arbitrum Goerli or Sepolia testnet from your wallet, incurring a minor gas fee payable in testnet ETH. This action deploys your chain's base contracts through an Orbit factory contract on Arbitrum's L2 testnet, which sets up your chain's infrastructure for transaction processing, staking, and other critical operations. After completing this transaction, you'll either move to configure a keyset for an AnyTrust chain or proceed to download configuration files to launch your chain, depending on your chosen chain type.\n\n### Step 5: Keysets Configuration (Anytrust Only)\nThe Batch Poster's functionality hinges on activating a keyset in the SequencerInbox contract, using keyset and hash binaries. For Orbit AnyTrust chains, an initial keyset is generated and linked to the SequencerInbox during deployment. Post-deployment, completing a transaction with a gas fee on the Arbitrum testnet redirects you to a download page to advance your chain's setup.\n\n### Step 6: Set Up Orbit Chain's Local Development Environment\nAfter deploying your Orbit chain, you'll be presented with two JSON configurations: Rollup Config and L3 Config. You should download both:\n\n1. **Rollup Config**: Saves as `nodeConfig.json`, containing your chain's node settings and the private keys for the validator and batch poster to sign transactions.\n\n2. **L3Config**: Saves as `orbitSetupScriptConfig.json`, holding your chain's overall settings, including those for Token Bridge contracts.\n\nNext, to set up your local environment:\n\n1. Clone the `orbit-setup-script` repository from GitHub.\n2. Place the `nodeConfig.json` file into the `config` directory of the cloned repository.\n3. Similarly, move the `orbitSetupScriptConfig.json` file into the `config` directory.\n4. Install necessary dependencies by executing `yarn install` in the repository's root directory. \n\n### Step 7: Finish Setting up Chain\nStart Docker and execute `docker-compose up -d` in the orbit-setup-script repository's root directory to initiate a Nitro node and BlockScout explorer. You can then navigate to `http://localhost:4000/` to interact with the BlockScout explorer, enabling you to inspect transactions and blocks on your chain for debugging purposes. A provided Hardhat script automates several setup tasks, including funding validator and batch-poster accounts, depositing ETH through the bridge, deploying Token Bridge contracts, and setting chain parameters. Execute this script from the orbit-setup-script repository's root, substituting `0xYourPrivateKey` with your Owner account's private key and the local RPC URL with your node's. \n\n- For Arbitrum Goerli, use\n`PRIVATE_KEY=\"0xYourPrivateKey\" L2_RPC_URL=\"https://goerli-rollup.arbitrum.io/rpc\" L3_RPC_URL=\"http://localhost:8449\" yarn run setup`. \n\n- For Arbitrum Sepolia, \n`PRIVATE_KEY=\"0xYourPrivateKey\" L2_RPC_URL=\"https://sepolia-rollup.arbitrum.io/rpc\" L3_RPC_URL=\"http://localhost:8449\" yarn run setup`.",
      "name": "How to launch an Orbit Chain?",
      "stepItems": [],
      "uuid": "4a550e4d-c00e-4586-8051-3403a44a7929"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "d01a95c5-37c4-48db-89f0-2dd8d9b6f80b"
    },
    {
      "content": "## step by step guide to Customizing behaviours\n\n\n## Chain Parameters\nChain parameters define the essential rules and configurations for a blockchain network, such as block size, block time, consensus rules, and network IDs, ensuring that all nodes on the network are in sync and follow the same protocol for validating and adding transactions. They are critical for maintaining the blockchain's integrity and security.\n\n| Param                | Description                                                                                               | Arbitrum One               | Nova                      | Arb Goerli                | Arb Sepolia               |\n|----------------------|-----------------------------------------------------------------------------------------------------------|----------------------------|---------------------------|---------------------------|---------------------------|\n| Dispute window       | Time for assertions to get confirmed during which validaors can issue a challenge                         | 45818 blocks (~ 6.4 days ) | 45818 blocks (~ 6.4 days) | 20 blocks (~ 4.0 minutes) | 20 blocks (~ 4.0 minutes) |\n| Base stake           | Amount of stake required for a validator to make an assertion                                             | 1 ETH                      | 1 ETH                     | 1 Goerli ETH              | 1 Sepolia ETH             |\n| Force-include period | Period after which a delayed message can be included into the inbox without any action from the Sequencer | 5760 blocks / 24 hours     | 5760 blocks / 24 hours    | 5760 blocks / 24 hours    | 5760 blocks / 24 hours    |\n| Gas speed limit      | Target gas/sec, over which the congestion mechanism activates                                             | 7,000,000 gas/sec          | 7,000,000 gas/sec         | 3,000,000 gas/sec         | 7,000,000 gas/sec         |\n| Gas price floor      | Minimum gas price                                                                                         | 0.1 gwei                   | 0.01 gwei                 | 0.1 gwei                  | 0.1 gwei                  |\n| Block gas limit      | Maximum amount of gas that all the transactions inside a block are allowed to consume                     | 32,000,000                 | 32,000,000                | 20,000,000                | 32,000,000                |\n",
      "name": "Customizing Orbit Chain",
      "stepItems": [],
      "uuid": "061749cd-bd33-4f0b-9524-1ab46bcd2411"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "3ecc45ec-080d-4df9-893c-e6b4654cc324"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi",
  "uuid": "arbitrum-orbit-arbitrum-university-525",
  "version": 1,
  "priority": 80
}