{
  "categories": [],
  "content": "Exploring Arbitrum Orbit: The Next Frontier in Layer-2 Solutions",
  "created": "2023-11-10T13:29:19.014Z",
  "guideType": "onboarding",
  "key": "arbitrum-orbit-arbitrum-university-525",
  "name": "Arbitrum Orbit",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "## What is Orbit?\nArbitrum Orbit enables the creation of private blockchain chains with customizable features, such as governance and fee structures, which settle transactions on Arbitrum's Layer 2 ecosystems like Arbitrum One or Nova. It utilizes the Arbitrum Nitro technology stack, offering benefits like Nitro's fraud proofs, advanced data compression, and EVM+ compatibility, while also allowing for ongoing upgrades from the Nitro stack developments. Orbit chains can be tailored for specific applications or broader use cases, offering gas price stability, permissioned access, and the choice between Rollup or AnyTrust protocols. Governance is independently determined by the chain creators, providing a flexible, scalable, and secure platform for hosting a range of dApps or private EVM-compatible smart contracts, with the ability to incrementally adopt Ethereum's security features.\n\n## Benefits of Orbit\nArbitrum Orbit addresses several key challenges within the Ethereum ecosystem:\n\n**1. Scalability:** Orbit facilitates scalability by allowing the creation of multiple chains. This helps alleviate scaling challenges by distributing activities across various environments, each with its own resource management, thereby easing bottlenecks that could arise on a single chain.\n\n**2. Flexible Security Models**: With Orbit, developers can implement and test different security models to find the right balance for their projects. For instance, while Arbitrum One offers a fully trustless environment, Arbitrum Nova provides an option to optimize for lower fees with a mild trust assumption. Orbit extends this flexibility, making experimentation with security tradeoffs more accessible.\n\n**3. Flexible Execution Environments**: Orbit chains allow for customized execution environments. While maintaining full EVM compatibility, Orbit chains can also limit smart contract functionalities to better serve specific project requirements, leading to optimized performance.\n\n**4. Flexible Governance**: Developers have the autonomy to establish their own governance mechanisms on Orbit chains, which can be tailored to suit the unique needs of their projects, communities, or stakeholders.\n\n**5. Increased Adoption of dApps**: Orbit lowers barriers to progressive decentralization, making it more feasible for developers to launch decentralized applications. It enables a new breed of dApps that benefit from being built in more autonomous, self-managed conditions, potentially increasing the adoption and diversity of dApps within the blockchain space.",
      "name": "Introduction to Orbit",
      "stepItems": [],
      "uuid": "16adea27-d0a8-4a7b-99aa-c7635f4cd221"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "label": "Full Name",
          "required": false,
          "type": "PublicShortInput",
          "uuid": "8057ffff-5953-4d13-be00-1a462febb9d1"
        },
        {
          "answerKeys": [
            "choice_1",
            "choice_2",
            "choice_3"
          ],
          "choices": [
            {
              "content": "Choice 1",
              "key": "choice_1"
            },
            {
              "content": "Choice 2",
              "key": "choice_2"
            },
            {
              "content": "Choice 3",
              "key": "choice_3"
            },
            {
              "content": "Choice 4",
              "key": "choice_4"
            }
          ],
          "content": "Contents of the question",
          "type": "MultipleChoice",
          "uuid": "a34afef3-148a-4e79-8f14-fe0aae2c90f7",
          "explanation": "Explanation of the question"
        }
      ],
      "uuid": "62a5e58f-54fa-45d3-ba27-92d8ab5f9a40"
    },
    {
      "content": "## Orbit Licensing \nThe licensing for Arbitrum Orbit chains is designed to provide both security and flexibility for developers using the Arbitrum Nitro codebase. When you create an Orbit chain, you receive a license that is both perpetual, meaning it cannot be revoked, and recursive, allowing your Orbit chain to host further chains under the same licensing terms. This ensures that once you've developed your Orbit chain, you retain unfettered and ongoing access to the software, and you can extend these rights to additional chains created within your Orbit chain's ecosystem.\n\nHowever, this license applies specifically to chains that settle to an Arbitrum-DAO-governed chain. If you wish to establish an independent Layer 2 chain on Ethereum that does not settle to an Arbitrum-DAO chain, you must obtain a separate license. For this, you have two avenues:\n\n**1. Offchain Labs**: You can directly request a custom license from Offchain Labs, the original developers of the Arbitrum Nitro codebase and the primary licensor.\n\n**2. Arbitrum DAO Proposal**: Alternatively, you can submit a proposal to the Arbitrum DAO, which has been granted co-licensor rights. The DAO will then make a democratic decision on whether to grant a license for your new L2 chain.\n\n## How to customize your Orbit chain's deployment configuration?\nTo customize your Orbit chain's configuration, follow these steps when you access the Orbit chain deployment portal:\n\n### Step1: Access the Deployment Portal\nNavigate to the Orbit chain deployment portal where you'll launch your new Orbit chain. You will encounter a form with various configuration fields. This form typically comes with default values that are suitable for many cases but can be customized.\n\n### Step 2: Update Information\nFor devnets, the Chain ID is automatically assigned and isn't crucial. In production, you'll choose a unique integer identifier that hasnâ€™t been used on chain indexes like Chainlist.org. Enter a distinctive name for your Orbit chain that is easily recognizable to your users and developers.\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1699614157534_screenshot_2023-11-10%20at%204.01.25%20pm.png\"/>\n</div>\n\n### Step 3: Customise Specifications\nDecide on the Challenge period in blocks, balancing the time validators have to dispute states against the withdrawal delay for users. This is measured in blocks of the underlying L1 chain. Specify the token for validators to use as a stake, using the token's contract address on the L2 chain to which your Orbit chain settles, or use the address for ETH if that's the chosen stake token. Set the Base stake amount, considering that a lower stake lowers the barrier to entry but may increase vulnerability to attacks, while a higher stake deters attacks but raises the barrier to validator participation.\n\n### Step 4: Owner\nProvide the account address that will own and manage the Orbit chain's base contracts. In a production environment, this address might be governed by a DAO or a multisig, but for a devnet, it can be a standard Ethereum wallet address. Carefully review the default values and modify them based on the needs and security considerations of your project. Once you've finalized the configuration values, proceed with the deployment, ensuring that the Owner address has sufficient ETH to cover gas costs for contract deployment on L2.\n\nBy customizing these settings, you can tailor your Orbit chain to the specific requirements of your application, balancing security, participation, and administrative control according to your project's needs.",
      "name": "Orbit Ownership",
      "stepItems": [],
      "uuid": "dc9130cc-0a1c-4d6c-8f47-06622f53d0ef"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "3f7ccfec-7f60-48c2-a0dd-4a1df45eb790"
    },
    {
      "content": "## Steps to launch an Orbit Chain\n\n### Prerequisites\n\n- Docker\n\n- A browser-based Ethereum wallet (like MetaMask)\n\n- At least 1.5 testnet ETH\n\n### Step 1: Aqcuire Arbitrum Testnet $ETH\nTo initiate your Orbit chain, a minimum of 1.5 testnet ETH is required to fund the deployment of the foundational contracts to the chosen base chain, which can be either Arbitrum Goerli or Sepolia. With Sepolia being the preferred choice due to the planned obsolescence of Goerli, you should secure your testnet ETH from an Ethereum Layer 1 faucet for either Goerli or Sepolia. Once obtained, you can transfer your L1 testnet ETH to the corresponding Arbitrum Layer 2 testnet through the Arbitrum bridge.\n\n### Step 2: Choose Chain Type: Anytrust vs Roll up\nArbitrum Rollup ensures a secure, open validation process by storing data on Ethereum L1, while Arbitrum AnyTrust reduces fees through a trusted Data Availability Committee managing data off-chain. Rollup chains are recommended for highly secure applications such as DeFi platforms, while AnyTrust is better suited for transaction-intensive applications like games and social dApps that prioritize lower fees. Then Configure the orbit chain's deployment using the step by step guide available in the previous slide.\n\n### Step 3: Configure Validators and batch Poster\nIn the Configure Validators section of the Orbit chain deployment, you'll specify the number of validators and their addresses for your chain. The first validator's address is auto-generated, with its private key saved in a configuration file. These validators will ensure transaction integrity and manage the state of your Orbit chain on the base chain. They will be included in an allow-list on your chain's base contract, granting them permission to stake and validate. The terms \"base contracts\" and \"base chain\" refer to the L2 contracts of your Orbit chain and the L2 network they're deployed on, respectively. After setting up validators, you'll move on to configure the batch poster. In the Configure Batch Poster section, an address for the batch poster will be auto-generated, responsible for posting transaction batches from your Orbit chain to its base chain's contracts. Its private key is also auto-generated and stored in a JSON configuration file. After configuring this address, you proceed to the next deployment phase of your Orbit chain.\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1699617977164_screenshot_2023-11-10%20at%205.05.11%20pm.png\"/>\n</div>\n\n### Step 4: Deploye Orbit Chain\nTo deploy your Orbit chain's base contracts, click the Deploy button on the configuration form, which prompts a transaction submission to the Arbitrum Goerli or Sepolia testnet from your wallet, incurring a minor gas fee payable in testnet ETH. This action deploys your chain's base contracts through an Orbit factory contract on Arbitrum's L2 testnet, which sets up your chain's infrastructure for transaction processing, staking, and other critical operations. After completing this transaction, you'll either move to configure a keyset for an AnyTrust chain or proceed to download configuration files to launch your chain, depending on your chosen chain type.\n\n### Step 5: Keysets Configuration (Anytrust Only)\nThe Batch Poster's functionality hinges on activating a keyset in the SequencerInbox contract, using keyset and hash binaries. For Orbit AnyTrust chains, an initial keyset is generated and linked to the SequencerInbox during deployment. Post-deployment, completing a transaction with a gas fee on the Arbitrum testnet redirects you to a download page to advance your chain's setup.\n\n### Step 6: Set Up Orbit Chain's Local Development Environment\nAfter deploying your Orbit chain, you'll be presented with two JSON configurations: Rollup Config and L3 Config. You should download both:\n\n1. **Rollup Config**: Saves as `nodeConfig.json`, containing your chain's node settings and the private keys for the validator and batch poster to sign transactions.\n\n2. **L3Config**: Saves as `orbitSetupScriptConfig.json`, holding your chain's overall settings, including those for Token Bridge contracts.\n\nNext, to set up your local environment:\n\n1. Clone the `orbit-setup-script` repository from GitHub.\n2. Place the `nodeConfig.json` file into the `config` directory of the cloned repository.\n3. Similarly, move the `orbitSetupScriptConfig.json` file into the `config` directory.\n4. Install necessary dependencies by executing `yarn install` in the repository's root directory. \n\n### Step 7: Finish Setting up Chain\nStart Docker and execute `docker-compose up -d` in the orbit-setup-script repository's root directory to initiate a Nitro node and BlockScout explorer. You can then navigate to `http://localhost:4000/` to interact with the BlockScout explorer, enabling you to inspect transactions and blocks on your chain for debugging purposes. A provided Hardhat script automates several setup tasks, including funding validator and batch-poster accounts, depositing ETH through the bridge, deploying Token Bridge contracts, and setting chain parameters. Execute this script from the orbit-setup-script repository's root, substituting `0xYourPrivateKey` with your Owner account's private key and the local RPC URL with your node's. \n\n- For Arbitrum Goerli, use\n`PRIVATE_KEY=\"0xYourPrivateKey\" L2_RPC_URL=\"https://goerli-rollup.arbitrum.io/rpc\" L3_RPC_URL=\"http://localhost:8449\" yarn run setup`. \n\n- For Arbitrum Sepolia, \n`PRIVATE_KEY=\"0xYourPrivateKey\" L2_RPC_URL=\"https://sepolia-rollup.arbitrum.io/rpc\" L3_RPC_URL=\"http://localhost:8449\" yarn run setup`.",
      "name": "How to launch an Orbit Chain?",
      "stepItems": [],
      "uuid": "4a550e4d-c00e-4586-8051-3403a44a7929"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "d01a95c5-37c4-48db-89f0-2dd8d9b6f80b"
    },
    {
      "content": "## How to Customise Orbit Chain's Behaviour \nCustomizing your Orbit chain requires understanding the State Transition Function (STF), which determines block creation from transactions. Modifications to the STF, like adding new EVM opcodes or changing gas reward structures, necessitate updating the fraud proving system to acknowledge the changes as legitimate; otherwise, unmodified nodes could challenge these modifications. Non-STF changes, such as new RPC methods or transaction ordering, don't affect consensus and need no such updates. For compatibility with Arbitrum Nitro, the STF must be deterministic, not retroactively alter block outcomes, operate without external resources, maintain state within the Ethereum state trie, not alter Ethereum state outside transactions, produce results swiftly to maintain node sync, and handle all inputs without failure. \nIf you're looking to alter the State Transition Function, it's necessary to create a custom version of the Arbitrum Nitro node Docker image. The behaviour of an orbit chain can be customised by following the steps given below:\n\n### Step 1: Download Nitro Source Code\nStart by duplicating the Nitro repository:\n\n`git clone --branch v2.1.1 https://github.com/OffchainLabs/nitro.git\ncd nitro\ngit submodule update --init --recursive --force\n`\n\nProceed to apply your modifications to the State Transition Function.\n\n### Step 2: Run Node Without Fraud Proof\nFor building the custom Arbitrum Nitro node Docker image, ensure Docker is installed by checking with docker version in the terminal. If it's not installed, refer to Docker's official guide or install it using your Linux distribution's package manager and enable the Docker service. With Docker ready, navigate to the Nitro directory and build your custom node using the command `docker build . --tag custom-nitro-node`. After constructing your Nitro node image, edit your node's `nodeConfig.json` file, typically in the `config` directory, to include the `--node.staker.dangerous.without-block-validator` parameter under the staker configuration to bypass fraud proof checks.\nHere's an example snippet for the nodeConfig.json:\n`...\n\"staker\": {\n  ...\n  \"dangerous\": {\n    \"without-block-validator\": true\n  }\n  ...\n},\n...\n`\nYou can launch your node in two ways:\n\n1. Via docker-compose: Update the docker-compose.yml file to use custom-nitro-node for the Nitro service, then execute docker compose up to start all services.\n`...\nnitro:\n  image: custom-nitro-node\n  ports:\n...\n`\n2. Directly with docker run: To run just the Nitro node, use:\n`docker run --rm -it -v /path/to/your/node/dir:/home/user/.arbitrum -p 0.0.0.0:8449:8449 custom-nitro-node --conf.file /home/user/.arbitrum/nodeConfig.json`\n\n### Step 3: Enable Fraud Proof\nTo enable fraud proofs, you'll need to build the \"replay binary\", which defines the State Transition Function for the fraud prover. The replay binary (sometimes called the machine) re-executes the State Transition Function against input messages to determine the correct output block. It has three forms:\n\nThe replay.wasm binary is the Go replay binary compiled to WASM. It's used by the JIT validator to verify blocks against the fraud prover.\nThe machine.wavm.br binary is a compressed binary containing the Go replay binary and all its dependencies, compiled to WASM, then translated to the Arbitrum fraud proving variant WAVM. It's used by Arbitrator when actually entering a challenge and performing the fraud proofs, and has identical behavior to replay.wasm.\nThe WASM module root (stored in module-root.txt) is a 32 byte hash usually expressed in hexadecimal which is a merkelization of machine.wavm.br. The replay binary is much too large to post on-chain, so this hash is set in the L1 rollup contract to determine the correct replay binary during fraud proofs.\nTo run a validator node with fraud proofs enabled, the validator node's Docker image will need to contain all three of these versions of the replay binary.\n\n#### Build a dev image\nThe simplest way to build a Docker image with the new replay binary is to build a dev image. These images contain a freshly built replay binary, but note that the replay binary and corresponding WASM module root will generally change when the code is updated, even if the State Transition Function has equivalent behavior. It's important that the validator's WASM module root matches the on-chain WASM module root, which is why this approach is harder to maintain. Over the longer term, you'll want to maintain a separate build of the replay binary that matches the one currently on-chain, usable by any node image.\n\nTo build the dev node image and get the WASM module root, run:\n\n`docker build . --target nitro-node-dev --tag custom-nitro-node-dev\ndocker run --rm --entrypoint cat custom-nitro-node-dev target/machines/latest/module-root.txt`\n\nOnce you have the WASM module root, you can put it on-chain by calling `setWasmModuleRoot(newWasmModuleRoot)` on the rollup contract as the owner. The rollup contract address can be found in the chain deployment info JSON. You can confirm that the WASM module root was updated by calling `wasmModuleRoot()` on the rollup contract.\n\nOnce you have set the new WASM module root on-chain, you can re-enable fraud proofs and run your node.\n\nTo re-enable fraud proofs, open your `nodeConfig.json` file again, and remove the \"dangerous\" section (containing the `without-block-validator` property) that you previously added.\n\nAfter that, you'll have, again, two ways of running your node.\n\n1. Using the docker-compose file\n\nAs mentioned before, this is the recommended way if you're running your Orbit chain locally through the provided docker-compose file. In `docker-compose.yml`, modify the Docker image used for the Nitro container. Notice that we'll now use the `custom-nitro-node-dev` you just created:\n\n`...\nnitro:\n  image: custom-nitro-node-dev\n  ports:\n...`\n\nAnd run docker compose up to run all of your containers.\n\n2. Use docker run to run your Nitro node only\n\nThis method will only run the customized Nitro node (i.e., it will not run Blockscout, or the DA server if you're using an AnyTrust chain). Use the following command:\n\n`docker run --rm -it -v /path/to/your/node/dir:/home/user/.arbitrum -p 0.0.0.0:8449:8449 custom-nitro-node-dev --conf.file /home/user/.arbitrum/nodeConfig.json`\n\n\n####  Preserving the replay binary\nThe primary issue with simply using a nitro-node-dev build is that, whenever the code changes at all, the replay binary will also change.\n\nIf the node is missing the replay binary corresponding to the on-chain WASM module root, it will be unable to act as a validator. Therefore, when releasing new node Docker images it's important to include the currently on-chain WASM module root.\n\nTo do that, you'll need to first extract the replay binary from the nitro-node-dev Docker image built earlier:\n\n`docker run --rm --name replay-binary-extractor --entrypoint sleep custom-nitro-node-dev infinity\ndocker cp replay-binary-extractor:/home/user/target/machines/latest extracted-replay-binary\ndocker stop replay-binary-extractor\ncat extracted-replay-binary/module.root\nmv extracted-replay-binary \"target/machines/$(cat extracted-replay-binary/module.root)\"`\n\nThese commands will output the new WASM module root, and create the directory `target/machines/<wasm module root>.` There you'll find the three versions of the replay binary mentioned earlier: `replay.wasm`, `machine.wavm.br`, and `module-root.txt`, along with some other optional files. Now that you've extracted the replay binary, there are two ways to add it to future Docker images, including non-dev image builds. You can either keep it locally and copy it in, or host it on the web.\n\nOption 1: Store the extracted replay binary locally\nNow that we've extracted the replay binary, we can modify the `Dockerfile` to copy it into new Docker builds. Edit the Dockerfile file in the root of the nitro folder, and after all the `RUN ./download-machines.sh ...` lines, add:\n\n`COPY target/machines/<wasm module root> <wasm module root>\nRUN ln -sfT <wasm module root> latest`\n\nReplace each `<wasm module root>` with the WASM module root you got earlier.\n\nOption 2: Host the replay binary on the web\nTo support building the Docker image on other computers without this local machine directory, you'll need to either commit the machine to git, or preferably, host the replay binary on the web.\n\nTo host the replay binary on the web, you'll need to host the `replay.wasm` and `machine.wavm.br` files somewhere. One good option is GitHub releases, but any hosting service works.\n\nOnce you have those two files hosted, instead of the `COPY` and `RUN` command mentioned in option 1, you'll need to add these new lines to the Dockerfile file in the root of the nitro folder, after all the `RUN ./download-machines.sh ...` lines:\n\n`RUN wasm_module_root=\"<wasm module root>\" && \\\n    mkdir \"$wasm_module_root\" && \\\n    wget <url of replay.wasm> -O \"$wasm_module_root/replay.wasm\" && \\\n    wget <url of machine.wavm.br> -O \"$wasm_module_root/machine.wavm.br\" && \\\n    echo \"$wasm_module_root\" > \"$wasm_module_root/module-root.txt\" && \\\n    ln -sfT \"$wasm_module_root\" latest`\n\nReplace the `<wasm module root>` with the WASM module root you got earlier, the `<url of replay.wasm>` with the direct link to the `replay.wasm` file (it must be a direct link to the file and not just a download site), and the `<url of machine.wavm.br>` with the direct link to the `machine.wavm.br` file.\n\n### Step 4: Verify Fraud Proofs\nWith your Docker images ready, test your blockchain by making transactions and monitoring for \"validation succeeded\" in the logs, indicating the State Transition Function is working. If you encounter \"Error during validation,\" check that your replay binary is updated with your latest changes and the WASM module root in the rollup contract is correctly set to match your binary.\n\n## Chain Parameters\nChain parameters define the essential rules and configurations for a blockchain network, such as block size, block time, consensus rules, and network IDs, ensuring that all nodes on the network are in sync and follow the same protocol for validating and adding transactions. They are critical for maintaining the blockchain's integrity and security.\n\n| Param                | Description                                                                                               | Arbitrum One               | Nova                      | Arb Goerli                | Arb Sepolia               |\n|----------------------|-----------------------------------------------------------------------------------------------------------|----------------------------|---------------------------|---------------------------|---------------------------|\n| Dispute window       | Time for assertions to get confirmed during which validaors can issue a challenge                         | 45818 blocks (~ 6.4 days ) | 45818 blocks (~ 6.4 days) | 20 blocks (~ 4.0 minutes) | 20 blocks (~ 4.0 minutes) |\n| Base stake           | Amount of stake required for a validator to make an assertion                                             | 1 ETH                      | 1 ETH                     | 1 Goerli ETH              | 1 Sepolia ETH             |\n| Force-include period | Period after which a delayed message can be included into the inbox without any action from the Sequencer | 5760 blocks / 24 hours     | 5760 blocks / 24 hours    | 5760 blocks / 24 hours    | 5760 blocks / 24 hours    |\n| Gas speed limit      | Target gas/sec, over which the congestion mechanism activates                                             | 7,000,000 gas/sec          | 7,000,000 gas/sec         | 3,000,000 gas/sec         | 7,000,000 gas/sec         |\n| Gas price floor      | Minimum gas price                                                                                         | 0.1 gwei                   | 0.01 gwei                 | 0.1 gwei                  | 0.1 gwei                  |\n| Block gas limit      | Maximum amount of gas that all the transactions inside a block are allowed to consume                     | 32,000,000                 | 32,000,000                | 20,000,000                | 32,000,000                |\n",
      "name": "Customizing Orbit Chain",
      "stepItems": [],
      "uuid": "061749cd-bd33-4f0b-9524-1ab46bcd2411"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "3ecc45ec-080d-4df9-893c-e6b4654cc324"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi",
  "uuid": "arbitrum-orbit-arbitrum-university-525",
  "version": 1,
  "priority": 80
}