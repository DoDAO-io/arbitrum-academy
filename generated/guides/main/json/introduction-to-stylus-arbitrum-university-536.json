{
  "categories": [],
  "content": "Delving deeper into stylus blockchain",
  "created": "2023-11-21T12:34:37.421Z",
  "guideType": "onboarding",
  "key": "introduction-to-stylus-arbitrum-university-536",
  "name": "Introduction to Stylus ",
  "publishStatus": "Live",
  "steps": [
    {
      "content": "## What is stylus \nStylus is a cutting-edge tool designed to enhance the development of smart contracts on the Arbitrum platform, which is part of the broader Ethereum ecosystem. It expands the capabilities of smart contract creation on the Arbitrum platform by allowing developers to utilize a wide array of programming languages that compile into WebAssembly (WASM). This means that languages such as Rust, C, and C++ can now be employed to write EVM-compatible smart contracts. This is enabled through the use of the Stylus Software Development Kit (SDK) and its accompanying command-line interface (CLI) tool. It leverages Arbitrum's existing WASM infrastructure to ensure that these smart contracts benefit from the platform's efficient execution environment, which translates into faster performance and reduced gas costs. This efficiency gain is attributed to WASM's modern binary format, known for speed, portability, and security. \n\nStylus represents an upgrade to Arbitrum Nitro, a technology stack that powers various Arbitrum chains, and is part of the EVM+ paradigm, maintaining full interoperability with existing Solidity contracts. The innovation of Stylus lies in its ability to deterministically prove the correctness of any program that compiles to WASM, owing to Arbitrum Nitro's unique fraud-proving capabilities, which are integral to maintaining network integrity and trust.\n\n## Importance of stylus\nStylus has transformed the developement of smart constracts. Some of the key advantages are:\n\n**1. Multi-Language Support:** Stylus broadens access to Arbitrum's blockchain development by accommodating a variety of programming languages. With only 20,000 Solidity developers, the inclusion of Rust and C—with their combined 15 million developers—could greatly accelerate the platform's growth and user adoption.\n\n**2. EVM Compatibility:** Stylus combines the traditional benefits of the EVM with improved efficiency and a rich set of libraries from languages like Rust, C, and C++, elevating the standard for smart contract development without altering EVM's core functionality.\n\n**3. Cost-Effective Advanced Cryptography:** Stylus enables previously impractical use cases with more than tenfold computational and over a hundredfold memory efficiency improvements. It allows for the deployment of custom cryptography libraries, fostering a new era of blockchain innovation.\n\n**4. Opt-In Reentrancy Protection:** Stylus not only saves money and runs faster but also increases security. It automatically guards against reentrancy, a common problem in smart contracts, and this feature is turned on from the start to prevent issues.\n\n**5. Full Interoperability:** Solidity and WASM programs can work together smoothly. Developers can mix languages, using Solidity to run Rust code, or vice versa, without any extra setup.",
      "name": "Introduction to Stylus",
      "stepItems": [],
      "uuid": "c4c75764-bd0f-4590-8594-c928d4994600"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "label": "Full Name",
          "required": false,
          "type": "PublicShortInput",
          "uuid": "6060ea71-ae02-4033-add5-265b2701d796"
        },
        {
          "answerKeys": [
            "choice_1",
            "choice_2",
            "choice_3"
          ],
          "choices": [
            {
              "content": "Choice 1",
              "key": "choice_1"
            },
            {
              "content": "Choice 2",
              "key": "choice_2"
            },
            {
              "content": "Choice 3",
              "key": "choice_3"
            },
            {
              "content": "Choice 4",
              "key": "choice_4"
            }
          ],
          "content": "Contents of the question",
          "type": "MultipleChoice",
          "uuid": "e36dee50-4d76-482a-829e-2a402fcac604",
          "explanation": "Explanation of the question"
        }
      ],
      "uuid": "0b874314-5f3a-442f-a7f8-0cd1c1558009"
    },
    {
      "content": "## Working of Stylus \nHere's a step-by-step process explaining how Stylus works:\n\n### Step 1: Coding\nDevelopers write smart contracts in languages like Rust, C, or C++. These languages are chosen because they can be compiled into efficient WebAssembly (WASM) code. Rust is the most supported on launch, with a dedicated SDK to simplify smart contract development. Developers can use familiar EVM functionalities within the Rust environment.\n\n### Step 2: Compilation\nThe written program is first compiled into WASM using appropriate tools like the Stylus SDK for Rust or compilers like Clang for C/C++. After compilation, the WASM code is uploaded to the blockchain, but it’s not yet executable. A special process called \"activation\" is then required. This involves using the ArbWasm precompile to convert WASM into binary code that’s optimized for the node’s architecture, ensuring the program is safe and efficient for execution.\n\n<div align=\"center\">\n  <img style=\"max-height:400px;margin-bottom:30px\" src=\"https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/introduction_to_stylus_arbitrum_university_536/1699638292250_screenshot_2023-11-10%20at%2010.44.06%20pm.png\"/>\n</div>\n\n### Step 3: Execution\nStylus programs run on a modified version of Wasmer, a leading WebAssembly runtime, which is optimized for blockchain applications. This allows Stylus programs to execute much faster than traditional EVM bytecode. Despite the introduction of Stylus, existing EVM contracts operate as usual. Both Solidity and WASM contracts are fully interoperable, allowing cross-contract calls without language barriers.\n\n### Step 4: Proving\nIn normal operations (the \"happy case\"), Nitro compiles execution history to native code to ensure efficiency. If a dispute arises (the \"sad case\"), Nitro uses WASM to perform interactive fraud proofs on Ethereum. Stylus extends Nitro's fraud-proofing capability by enabling it to work with any WASM program deployed by developers, maintaining the integrity and trustworthiness of the blockchain. ",
      "name": "How does it Work?",
      "stepItems": [],
      "uuid": "2c531825-b9c2-488f-a24b-c0991f2972ca"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "6ffd959e-56e9-41a1-8844-eeb5374a8441"
    },
    {
      "content": "",
      "name": "Smart Contracts",
      "stepItems": [],
      "uuid": "06c60302-2c7f-4951-88e4-44318ccd0507"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [],
      "uuid": "86f2ddbd-3798-4123-a17a-9eb2c3a70015"
    },
    {
      "content": "https://docs.arbitrum.io/stylus/stylus-gentle-introduction\n\nhttps://tradedog.io/arbitrum-stylus-the-future-of-ethereum-development/\n\nhttps://docs.arbitrum.io/stylus/how-tos/local-stylus-dev-node\n\nhttps://docs.arbitrum.io/stylus/how-tos/optimizing-binaries\n\nhttps://blockworks.co/news/arbitrum-stylus-testnet\n\nhttps://medium.com/offchainlabs/hello-stylus-6b18fecc3a22\n\nhttps://medium.com/offchainlabs/stylus-in-action-lifecycle-of-a-stylus-contract-630f492ff85c",
      "name": "References",
      "stepItems": [],
      "uuid": "35bd6d26-0080-4857-8e38-85296952e5d6"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/introduction_to_stylus_arbitrum_university_536/1699877748301_rectangle_99.png",
  "uuid": "introduction-to-stylus-arbitrum-university-536",
  "version": 1,
  "priority": 50
}