categories: []
content: 'Exploring Arbitrum Orbit: The Next Frontier in Layer-2 Solutions'
created: '2024-02-27T17:09:24.792Z'
guideType: onboarding
key: arbitrum-orbit-arbitrum-university-525
name: Arbitrum Orbit
publishStatus: Live
steps:
  - content: >-
      ## What is Orbit?

      Arbitrum Orbit enables the creation of private blockchain chains with
      customizable features, such as governance and fee structures, which settle
      transactions on Arbitrum's Layer 2 ecosystems like Arbitrum One or Nova.
      It utilizes the Arbitrum Nitro technology stack, offering benefits like
      Nitro's fraud proofs, advanced data compression, and EVM+ compatibility,
      while also allowing for ongoing upgrades from the Nitro stack
      developments. Orbit chains can be tailored for specific applications or
      broader use cases, offering gas price stability, permissioned access, and
      the choice between Rollup or AnyTrust protocols. Governance is
      independently determined by the chain creators, providing a flexible,
      scalable, and secure platform for hosting a range of dApps or private
      EVM-compatible smart contracts, with the ability to incrementally adopt
      Ethereum's security features.


      <div align="center">
        <img style="max-height:400px;margin-bottom:30px" src="https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1701177231413_orbit.png"/>
      </div>


      ## Benefits of Orbit

      Arbitrum Orbit addresses several key challenges within the Ethereum
      ecosystem:


      **1. Scalability:** Orbit facilitates scalability by allowing the creation
      of multiple chains. This helps alleviate scaling challenges by
      distributing activities across various environments, each with its own
      resource management, thereby easing bottlenecks that could arise on a
      single chain.


      **2. Flexible Security Models**: With Orbit, developers can implement and
      test different security models to find the right balance for their
      projects. For instance, while Arbitrum One offers a fully trustless
      environment, Arbitrum Nova provides an option to optimize for lower fees
      with a mild trust assumption. Orbit extends this flexibility, making
      experimentation with security tradeoffs more accessible.


      **3. Flexible Execution Environments**: Orbit chains allow for customized
      execution environments. While maintaining full EVM compatibility, Orbit
      chains can also limit smart contract functionalities to better serve
      specific project requirements, leading to optimized performance.


      <div align="center">
        <img style="max-height:400px;margin-bottom:30px" src="https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1701177276212_benefits_of%20orbit.png"/>
      </div>


      **4. Flexible Governance**: Developers have the autonomy to establish
      their own governance mechanisms on Orbit chains, which can be tailored to
      suit the unique needs of their projects, communities, or stakeholders.


      **5. Increased Adoption of dApps**: Orbit lowers barriers to progressive
      decentralization, making it more feasible for developers to launch
      decentralized applications. It enables a new breed of dApps that benefit
      from being built in more autonomous, self-managed conditions, potentially
      increasing the adoption and diversity of dApps within the blockchain
      space.
    name: Introduction to Orbit
    stepItems: []
    uuid: 16adea27-d0a8-4a7b-99aa-c7635f4cd221
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - B
        choices:
          - content: Creation of public blockchain chains
            key: A
          - content: Creation of private blockchain chains with customizable features
            key: B
          - content: Settlement of transactions on Layer 1 ecosystems
            key: C
          - content: Disabling ongoing upgrades from the Nitro stack developments
            key: D
        content: What does Arbitrum Orbit enable?
        type: SingleChoice
        uuid: 46708f5b-3912-4afa-b056-cd4ae5aeff2c
        explanation: >-
          Arbitrum Orbit enables the creation of private blockchain chains with
          customizable features, which settle transactions on Arbitrum's Layer 2
          ecosystems.
      - answerKeys:
          - D
        choices:
          - content: It limits the creation of multiple chains
            key: A
          - content: >-
              It restricts the implementation and testing of different security
              models
            key: B
          - content: It does not allow for customized execution environments
            key: C
          - content: >-
              It facilitates scalability by allowing the creation of multiple
              chains
            key: D
        content: What is one of the key benefits of Arbitrum Orbit?
        type: SingleChoice
        uuid: b22e2535-c422-47d3-bd0b-c41b58e84db1
        explanation: >-
          One of the key benefits of Arbitrum Orbit is scalability. It
          facilitates scalability by allowing the creation of multiple chains.
      - answerKeys:
          - C
        choices:
          - content: They allow for insecure chain environments
            key: A
          - content: They do not maintain full EVM compatibility
            key: B
          - content: They allow for customized execution environments
            key: C
          - content: Ewduce smart contract functionalities
            key: D
        content: What does Orbit chains allow for?
        type: SingleChoice
        uuid: 019942bb-3645-44cd-bf76-42bdff8fa411
        explanation: >-
          Orbit chains allow for customized execution environments. While
          maintaining full EVM compatibility, Orbit chains can also limit smart
          contract functionalities to better serve specific project
          requirements.
    uuid: 62a5e58f-54fa-45d3-ba27-92d8ab5f9a40
  - content: >-
      ## Orbit Licensing 

      The licensing for Arbitrum Orbit chains is designed to provide both
      security and flexibility for developers using the Arbitrum Nitro codebase.
      When you create an Orbit chain, you receive a license that is both
      perpetual, meaning it cannot be revoked, and recursive, allowing your
      Orbit chain to host further chains under the same licensing terms. This
      ensures that once you've developed your Orbit chain, you retain unfettered
      and ongoing access to the software, and you can extend these rights to
      additional chains created within your Orbit chain's ecosystem.


      <div align="center">
        <img style="max-height:400px;margin-bottom:30px" src="https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1701179466748_licensing.png"/>
      </div>


      However, this license applies specifically to chains that settle to an
      Arbitrum-DAO-governed chain. If you wish to establish an independent Layer
      2 chain on Ethereum that does not settle to an Arbitrum-DAO chain, you
      must obtain a separate license. For this, you have two avenues:


      **1. Offchain Labs**: You can directly request a custom license from
      Offchain Labs, the original developers of the Arbitrum Nitro codebase and
      the primary licensor.


      **2. Arbitrum DAO Proposal**: Alternatively, you can submit a proposal to
      the Arbitrum DAO, which has been granted co-licensor rights. The DAO will
      then make a democratic decision on whether to grant a license for your new
      L2 chain.


      ## How to customize your Orbit chain's deployment configuration?

      To customize your Orbit chain's configuration, follow these steps when you
      access the Orbit chain deployment portal:


      ### Step1: Access the Deployment Portal

      Navigate to the Orbit chain deployment portal where you'll launch your new
      Orbit chain. You will encounter a form with various configuration fields.
      This form typically comes with default values that are suitable for many
      cases but can be customized.


      ### Step 2: Update Information

      For devnets, the Chain ID is automatically assigned and isn't crucial. In
      production, you'll choose a unique integer identifier that hasnâ€™t been
      used on chain indexes like Chainlist.org. Enter a distinctive name for
      your Orbit chain that is easily recognizable to your users and developers.


      <div align="center">
        <img style="max-height:700px;margin-bottom:50px" src="https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1701179515385_configuration.png"/>
      </div>


      ### Step 3: Customise Specifications

      Decide on the Challenge period in blocks, balancing the time validators
      have to dispute states against the withdrawal delay for users. This is
      measured in blocks of the underlying L1 chain. Specify the token for
      validators to use as a stake, using the token's contract address on the L2
      chain to which your Orbit chain settles, or use the address for ETH if
      that's the chosen stake token. Set the Base stake amount, considering that
      a lower stake lowers the barrier to entry but may increase vulnerability
      to attacks, while a higher stake deters attacks but raises the barrier to
      validator participation.


      ### Step 4: Owner

      Provide the account address that will own and manage the Orbit chain's
      base contracts. In a production environment, this address might be
      governed by a DAO or a multisig, but for a devnet, it can be a standard
      Ethereum wallet address. Carefully review the default values and modify
      them based on the needs and security considerations of your project. Once
      you've finalized the configuration values, proceed with the deployment,
      ensuring that the Owner address has sufficient ETH to cover gas costs for
      contract deployment on L2.


      By customizing these settings, you can tailor your Orbit chain to the
      specific requirements of your application, balancing security,
      participation, and administrative control according to your project's
      needs.
    name: Orbit Ownership
    stepItems: []
    uuid: dc9130cc-0a1c-4d6c-8f47-06622f53d0ef
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - C
        choices:
          - content: Only security
            key: A
          - content: Only flexibility
            key: B
          - content: Both security and flexibility
            key: C
          - content: Neither security nor flexibility
            key: D
        content: What does the license for an Arbitrum Orbit chain provide?
        type: SingleChoice
        uuid: 6e1db1b7-5a5b-4b75-9fea-d897b224d7ad
        explanation: >-
          The license for an Arbitrum Orbit chain provides both security and
          flexibility for developers. It is perpetual and recursive, allowing
          the Orbit chain to host further chains under the same licensing terms.
      - answerKeys:
          - D
        choices:
          - content: By directly requesting from Ethereum
            key: A
          - content: By submitting a proposal to Offchain Labs
            key: B
          - content: By directly requesting from Arbitrum DAO
            key: C
          - content: >-
              By directly requesting from Offchain Labs or by submitting a
              proposal to the Arbitrum DAO
            key: D
        content: >-
          How can you obtain a separate license for an independent Layer 2 chain
          on Ethereum?
        type: SingleChoice
        uuid: 1ae65bf6-53d3-4144-ac11-70db96cc0206
        explanation: >-
          You can obtain a separate license for an independent Layer 2 chain on
          Ethereum either by directly requesting a custom license from Offchain
          Labs or by submitting a proposal to the Arbitrum DAO.
      - answerKeys:
          - B
        choices:
          - content: To make the Orbit chain look unique
            key: A
          - content: >-
              To tailor the Orbit chain to the specific requirements of your
              application
            key: B
          - content: To make the Orbit chain more complex
            key: C
          - content: To make the Orbit chain less secure
            key: D
        content: >-
          What is the purpose of customizing your Orbit chain's deployment
          configuration?
        type: SingleChoice
        uuid: 93d99e77-0ace-44d6-b3c8-ca06f3e3567f
        explanation: >-
          By customizing your Orbit chain's deployment configuration, you can
          tailor your Orbit chain to the specific requirements of your
          application, balancing security, participation, and administrative
          control according to your project's needs.
    uuid: 3f7ccfec-7f60-48c2-a0dd-4a1df45eb790
  - content: >-
      ## Steps to launch an Orbit Chain


      ### Prerequisites


      - Docker


      - A browser-based Ethereum wallet (like MetaMask)


      - At least 1.5 testnet ETH


      ### Step 1: Aqcuire Arbitrum Testnet $ETH

      To initiate your Orbit chain, a minimum of 1.5 testnet ETH is required to
      fund the deployment of the foundational contracts to the chosen base
      chain, which can be either Arbitrum Goerli or Sepolia. With Sepolia being
      the preferred choice due to the planned obsolescence of Goerli, you should
      secure your testnet ETH from an Ethereum Layer 1 faucet for either Goerli
      or Sepolia. Once obtained, you can transfer your L1 testnet ETH to the
      corresponding Arbitrum Layer 2 testnet through the Arbitrum bridge.


      ### Step 2: Choose Chain Type: Anytrust vs Roll up

      Arbitrum Rollup ensures a secure, open validation process by storing data
      on Ethereum L1, while Arbitrum AnyTrust reduces fees through a trusted
      Data Availability Committee managing data off-chain. Rollup chains are
      recommended for highly secure applications such as DeFi platforms, while
      AnyTrust is better suited for transaction-intensive applications like
      games and social dApps that prioritize lower fees. Then Configure the
      orbit chain's deployment using the step by step guide available in the
      previous slide.


      ### Step 3: Configure Validators and batch Poster

      In the Configure Validators section of the Orbit chain deployment, you'll
      specify the number of validators and their addresses for your chain. The
      first validator's address is auto-generated, with its private key saved in
      a configuration file. These validators will ensure transaction integrity
      and manage the state of your Orbit chain on the base chain. They will be
      included in an allow-list on your chain's base contract, granting them
      permission to stake and validate. The terms "base contracts" and "base
      chain" refer to the L2 contracts of your Orbit chain and the L2 network
      they're deployed on, respectively. After setting up validators, you'll
      move on to configure the batch poster. In the Configure Batch Poster
      section, an address for the batch poster will be auto-generated,
      responsible for posting transaction batches from your Orbit chain to its
      base chain's contracts. Its private key is also auto-generated and stored
      in a JSON configuration file. After configuring this address, you proceed
      to the next deployment phase of your Orbit chain.


      <div align="center">
        <img style="max-height:700px;margin-bottom:50px" src="https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1701183863381_launching.png"/>
      </div>


      ### Step 4: Deploye Orbit Chain

      To deploy your Orbit chain's base contracts, click the Deploy button on
      the configuration form, which prompts a transaction submission to the
      Arbitrum Goerli or Sepolia testnet from your wallet, incurring a minor gas
      fee payable in testnet ETH. This action deploys your chain's base
      contracts through an Orbit factory contract on Arbitrum's L2 testnet,
      which sets up your chain's infrastructure for transaction processing,
      staking, and other critical operations. After completing this transaction,
      you'll either move to configure a keyset for an AnyTrust chain or proceed
      to download configuration files to launch your chain, depending on your
      chosen chain type.


      ### Step 5: Keysets Configuration (Anytrust Only)

      The Batch Poster's functionality hinges on activating a keyset in the
      SequencerInbox contract, using keyset and hash binaries. For Orbit
      AnyTrust chains, an initial keyset is generated and linked to the
      SequencerInbox during deployment. Post-deployment, completing a
      transaction with a gas fee on the Arbitrum testnet redirects you to a
      download page to advance your chain's setup.


      ### Step 6: Set Up Orbit Chain's Local Development Environment

      After deploying your Orbit chain, you'll be presented with two JSON
      configurations: Rollup Config and L3 Config. You should download both:


      1. **Rollup Config**: Saves as `nodeConfig.json`, containing your chain's
      node settings and the private keys for the validator and batch poster to
      sign transactions.


      2. **L3Config**: Saves as `orbitSetupScriptConfig.json`, holding your
      chain's overall settings, including those for Token Bridge contracts.


      Next, to set up your local environment:


      1. Clone the `orbit-setup-script` repository from GitHub.

      2. Place the `nodeConfig.json` file into the `config` directory of the
      cloned repository.

      3. Similarly, move the `orbitSetupScriptConfig.json` file into the
      `config` directory.

      4. Install necessary dependencies by executing `yarn install` in the
      repository's root directory. 


      ### Step 7: Finish Setting up Chain

      Start Docker and execute `docker-compose up -d` in the orbit-setup-script
      repository's root directory to initiate a Nitro node and BlockScout
      explorer. You can then navigate to `http://localhost:4000/` to interact
      with the BlockScout explorer, enabling you to inspect transactions and
      blocks on your chain for debugging purposes. A provided Hardhat script
      automates several setup tasks, including funding validator and
      batch-poster accounts, depositing ETH through the bridge, deploying Token
      Bridge contracts, and setting chain parameters. Execute this script from
      the orbit-setup-script repository's root, substituting `0xYourPrivateKey`
      with your Owner account's private key and the local RPC URL with your
      node's. 


      - For Arbitrum Goerli, use

      `PRIVATE_KEY="0xYourPrivateKey"
      L2_RPC_URL="https://goerli-rollup.arbitrum.io/rpc"
      L3_RPC_URL="http://localhost:8449" yarn run setup`. 


      - For Arbitrum Sepolia, 

      `PRIVATE_KEY="0xYourPrivateKey"
      L2_RPC_URL="https://sepolia-rollup.arbitrum.io/rpc"
      L3_RPC_URL="http://localhost:8449" yarn run setup`.
    name: How to launch an Orbit Chain?
    stepItems: []
    uuid: 4a550e4d-c00e-4586-8051-3403a44a7929
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - C
        choices:
          - content: 0.5 testnet ETH
            key: A
          - content: 1 testnet ETH
            key: B
          - content: 1.5 testnet ETH
            key: C
          - content: 2 testnet ETH
            key: D
        content: >-
          What is the minimum amount of testnet ETH required to initiate an
          Orbit chain?
        type: SingleChoice
        uuid: f8558c23-ea56-4062-ac85-099fb082a8e0
        explanation: >-
          To initiate your Orbit chain, a minimum of 1.5 testnet ETH is required
          to fund the deployment of the foundational contracts to the chosen
          base chain.
      - answerKeys:
          - D
        choices:
          - content: Arbitrum Rollup and Arbitrum Rollup Plus
            key: A
          - content: Arbitrum AnyTrust and Arbitrum AnyTrust Plus
            key: B
          - content: Arbitrum Rollup Plus and Arbitrum AnyTrust Plus
            key: C
          - content: Arbitrum Rollup and Arbitrum AnyTrust
            key: D
        content: What are the two types of Orbit chains you can choose from?
        type: SingleChoice
        uuid: 337f2f17-7ffd-499f-9013-677f991802fc
        explanation: >-
          You can choose between Arbitrum Rollup and Arbitrum AnyTrust. Rollup
          chains are recommended for highly secure applications such as DeFi
          platforms, while AnyTrust is better suited for transaction-intensive
          applications like games and social dApps that prioritize lower fees.
    uuid: d01a95c5-37c4-48db-89f0-2dd8d9b6f80b
  - content: >
      Customizing the behavior of an Orbit chain involves modifying various
      deployment configuration parameters and possibly the State Transition
      Function (STF) for more advanced changes. Here's a brief guide on how to
      approach customization:


      ### Deployment Configuration Customization

      1. **Chain ID**: Usually inconsequential for devnets; ensure uniqueness
      for production scenarios.

      2. **Chain Name**: Choose a distinctive name for easy identification by
      users and developers.

      3. **Challenge Period (Blocks)**: Adjusts the time validators have to
      challenge the state. A trade-off between security and withdrawal speed.

      4. **Gas Token**: Select ETH or a specific ERC-20 token, following certain
      restrictions (e.g., 18 decimals, no rebasing or transfer fees).

      5. **Stake Token**: Specify the token (via contract address) required for
      validators to stake.

      6. **Base Stake**: Set the amount of stake required. Higher stakes
      discourage attacks but raise the barrier for validators.

      7. **Owner**: Designate the responsible account for deploying and updating
      the chain's base contracts.


      ### Advanced Customization: Modifying the State Transition Function (STF)

      1. **Understanding STF**: Recognize that STF defines how blocks are
      produced. Changes to STF require updating the fraud proving system.

      2. **Types of Modifications**:
         - STF-Affecting: Adding new EVM opcodes or altering gas distribution rules.
         - Non-STF-Affecting: Adding new RPC methods or changing transaction ordering.
      3. **Building a Modified Node**:
         - Clone the Nitro repository.
         - Apply your STF modifications.
         - Build a custom Docker image and modify node configuration to disable fraud proof verification (for testing).
      4. **Enabling Fraud Proofs**:
         - Build the "replay binary" and update the WASM module root on-chain.
         - Re-enable fraud proofs by adjusting node configuration.
         - Test your modifications and validate fraud proofs.

      ### Important Considerations

      - Ensure compatibility with Arbitrum Nitro: STF must be deterministic, not
      modify Ethereum state outside transactions, and must not fail.

      - Always test modifications thoroughly before deploying.

      - Stay updated with changes to Orbit, as it's still in public preview and
      subject to change.
    name: Customizing Orbit Chain
    stepItems: []
    uuid: 061749cd-bd33-4f0b-9524-1ab46bcd2411
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - B
        choices:
          - content: Responsible for transaction validation
            key: A
          - content: Responsible for block generation
            key: B
          - content: Responsible for node synchronization
            key: C
          - content: Responsible for maintaining the blockchain network
            key: D
        content: >-
          What is the State Transition Function (STF) in Orbit chain responsible
          for?
        type: SingleChoice
        uuid: 252012a7-a54c-4d18-bb8f-8a59a95961d7
        explanation: >-
          The State Transition Function (STF) in Orbit chain is responsible for
          block generation.
      - answerKeys:
          - C
        choices:
          - content: It is used to replay the transactions in the blockchain
            key: A
          - content: It is used to replay the blocks in the blockchain
            key: B
          - content: >-
              It re-executes the State Transition Function against input
              messages to determine the correct output block
            key: C
          - content: It is used to reply the state transitions in the blockchain
            key: D
        content: What is the purpose of the 'replay binary' in the Orbit chain?
        type: SingleChoice
        uuid: 06e5518a-3573-4528-a562-6fc020313c6c
        explanation: >-
          The replay binary re-executes the State Transition Function against
          input messages to determine the correct output block.
      - answerKeys:
          - D
        choices:
          - content: It is used to validate the blocks in the blockchain
            key: A
          - content: It is used to validate the transactions in the blockchain
            key: B
          - content: It is used to validate the state transitions in the blockchain
            key: C
          - content: >-
              It is set in the L1 rollup contract to determine the correct
              replay binary during fraud proofs
            key: D
        content: What is the purpose of the WASM module root in the Orbit chain?
        type: SingleChoice
        uuid: f6f1bd5e-b2b2-4f3e-ae0d-ddf853feabb9
        explanation: >-
          The WASM module root is a 32 byte hash usually expressed in
          hexadecimal which is a merkelization of machine.wavm.br. This hash is
          set in the L1 rollup contract to determine the correct replay binary
          during fraud proofs.
    uuid: 3ecc45ec-080d-4df9-893c-e6b4654cc324
  - content: ''
    name: Your Info
    stepItems:
      - label: Nickname
        required: false
        type: PublicShortInput
        uuid: 9a336741-2660-45d4-8677-edb9f74d8e9e
      - label: Wallet Address
        required: false
        type: PublicShortInput
        uuid: 244da2d3-bbee-422b-987a-bb3219643f7b
    uuid: 8802f1a2-877a-451c-a87d-4a5922258c58
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_orbit_arbitrum_university_525/1699877698340_rectangle_98.png
uuid: arbitrum-orbit-arbitrum-university-525
version: 1
priority: 80
