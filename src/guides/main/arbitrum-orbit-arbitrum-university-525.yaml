categories: []
content: 'Exploring Arbitrum Orbit: The Next Frontier in Layer-2 Solutions'
created: '2023-11-09T18:39:45.210Z'
guideType: onboarding
key: arbitrum-orbit-arbitrum-university-525
name: Arbitrum Orbit
publishStatus: Live
steps:
  - content: >-
      ## What is Orbit?

      Arbitrum Orbit enables the creation of private blockchain chains with
      customizable features, such as governance and fee structures, which settle
      transactions on Arbitrum's Layer 2 ecosystems like Arbitrum One or Nova.
      It utilizes the Arbitrum Nitro technology stack, offering benefits like
      Nitro's fraud proofs, advanced data compression, and EVM+ compatibility,
      while also allowing for ongoing upgrades from the Nitro stack
      developments. Orbit chains can be tailored for specific applications or
      broader use cases, offering gas price stability, permissioned access, and
      the choice between Rollup or AnyTrust protocols. Governance is
      independently determined by the chain creators, providing a flexible,
      scalable, and secure platform for hosting a range of dApps or private
      EVM-compatible smart contracts, with the ability to incrementally adopt
      Ethereum's security features.


      ## Problems Addressed by Orbit

      Arbitrum Orbit addresses several key challenges within the Ethereum
      ecosystem:


      **1. Scalability:** Orbit facilitates scalability by allowing the creation
      of multiple chains. This helps alleviate scaling challenges by
      distributing activities across various environments, each with its own
      resource management, thereby easing bottlenecks that could arise on a
      single chain.


      **2. Flexible Security Models**: With Orbit, developers can implement and
      test different security models to find the right balance for their
      projects. For instance, while Arbitrum One offers a fully trustless
      environment, Arbitrum Nova provides an option to optimize for lower fees
      with a mild trust assumption. Orbit extends this flexibility, making
      experimentation with security tradeoffs more accessible.


      **3. Flexible Execution Environments**: Orbit chains allow for customized
      execution environments. While maintaining full EVM compatibility, Orbit
      chains can also limit smart contract functionalities to better serve
      specific project requirements, leading to optimized performance.


      **4. Flexible Governance**: Developers have the autonomy to establish
      their own governance mechanisms on Orbit chains, which can be tailored to
      suit the unique needs of their projects, communities, or stakeholders.


      **5. Increased Adoption of dApps**: Orbit lowers barriers to progressive
      decentralization, making it more feasible for developers to launch
      decentralized applications. It enables a new breed of dApps that benefit
      from being built in more autonomous, self-managed conditions, potentially
      increasing the adoption and diversity of dApps within the blockchain
      space.
    name: Introduction to Orbit
    stepItems: []
    uuid: 16adea27-d0a8-4a7b-99aa-c7635f4cd221
  - content: ''
    name: Evaluation
    stepItems:
      - label: Full Name
        required: false
        type: PublicShortInput
        uuid: 8057ffff-5953-4d13-be00-1a462febb9d1
      - answerKeys:
          - choice_1
          - choice_2
          - choice_3
        choices:
          - content: Choice 1
            key: choice_1
          - content: Choice 2
            key: choice_2
          - content: Choice 3
            key: choice_3
          - content: Choice 4
            key: choice_4
        content: Contents of the question
        type: MultipleChoice
        uuid: a34afef3-148a-4e79-8f14-fe0aae2c90f7
        explanation: Explanation of the question
    uuid: 62a5e58f-54fa-45d3-ba27-92d8ab5f9a40
  - content: >
      ## Orbit Licensing 

      The licensing for Arbitrum Orbit chains is designed to provide both
      security and flexibility for developers using the Arbitrum Nitro codebase.
      When you create an Orbit chain, you receive a license that is both
      perpetual, meaning it cannot be revoked, and recursive, allowing your
      Orbit chain to host further chains under the same licensing terms. This
      ensures that once you've developed your Orbit chain, you retain unfettered
      and ongoing access to the software, and you can extend these rights to
      additional chains created within your Orbit chain's ecosystem.


      However, this license applies specifically to chains that settle to an
      Arbitrum-DAO-governed chain. If you wish to establish an independent Layer
      2 chain on Ethereum that does not settle to an Arbitrum-DAO chain, you
      must obtain a separate license. For this, you have two avenues:


      **1. Offchain Labs**: You can directly request a custom license from
      Offchain Labs, the original developers of the Arbitrum Nitro codebase and
      the primary licensor.


      **2. Arbitrum DAO Proposal**: Alternatively, you can submit a proposal to
      the Arbitrum DAO, which has been granted co-licensor rights. The DAO will
      then make a democratic decision on whether to grant a license for your new
      L2 chain.


      ## How (and when) to customize your Orbit chain's deployment configuration
    name: Orbit Ownership
    stepItems: []
    uuid: dc9130cc-0a1c-4d6c-8f47-06622f53d0ef
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 3f7ccfec-7f60-48c2-a0dd-4a1df45eb790
  - content: >-
      ## How to launch an orbit chain?

      ### Step by step guide and diagram

      ### Cross chain messaging









      ## Launching an Orbit Chain


      Launching an orbit chain involves several steps to ensure a smooth
      deployment. 


      #### Step 1


      Firstly, you need to acquire at least 1.5 testnet $ETH to cover the cost
      of deploying your Orbit chain's base contracts. It is recommended to use
      the Sepolia network instead of Goerli as Goerli will be deprecated soon.
      You can acquire testnet $ETH by using an L1 testnet $ETH faucet like
      goerlifaucet.com or sepoliafaucet.com.


      #### Step 2


      Once you have the testnet $ETH, you need to bridge it from Ethereum's L1
      Goerli or Sepolia network to Arbitrum's corresponding L2 testnet. This can
      be done using the Arbitrum bridge. It is important to note that Arbitrum
      Rollup is a trustless and permissionless protocol that requires all chain
      data to be posted on Ethereum's "Layer 1" (L1) chain. This ensures the
      security and availability of the data.


      #### Step 3


      Depending on your use-case, you can choose between Rollup chains and
      AnyTrust chains. Rollup chains are recommended for use-cases that demand a
      high level of security, such as decentralized exchanges and DeFi
      applications. AnyTrust chains, on the other hand, are suitable for
      use-cases that require lower fees and generate a large number of
      transactions, such as gaming and social applications.


      #### Step 4


      Once you have decided on the type of chain, you need to configure the
      validators and batch poster. Validators are responsible for validating the
      integrity of transactions, while the batch poster is responsible for
      posting batches of transactions from your Orbit chain to its base
      contracts. These addresses need to be added to an allow-list in your
      chain's base contracts.


      #### Step 5


      After configuring the validators and batch poster, you can proceed to
      review and deploy your Orbit chain. This involves submitting a transaction
      to the Arbitrum testnet, which deploys your Orbit chain's base contracts
      to the Arbitrum testnet. These base contracts facilitate the exchange of
      information between your chain's node(s) and its base chain's nodes.


      #### Step 6


      Once the deployment is complete, you may need to configure your keyset if
      you deployed an AnyTrust chain. This involves assigning an initial keyset
      to your SequencerInbox contract. Finally, you can download your chain's
      configuration files and launch your chain. These files contain important
      information about your chain, including the addresses of your chain's base
      contracts.


      By following these steps, you can successfully launch an orbit chain and
      start utilizing its features and capabilities. Remember to fund the batch
      poster and validator accounts on your underlying L2 chain and deposit ETH
      into your account using the chain's bridge. Monitoring the logs and
      tracking the progress of your chain's deployment is also important for
      debugging and troubleshooting purposes.
    name: How to launch an Orbit Chain?
    stepItems: []
    uuid: 4a550e4d-c00e-4586-8051-3403a44a7929
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: d01a95c5-37c4-48db-89f0-2dd8d9b6f80b
  - content: >
      ## step by step guide to Customizing behaviours



      ## Chain Parameters

      Chain parameters define the essential rules and configurations for a
      blockchain network, such as block size, block time, consensus rules, and
      network IDs, ensuring that all nodes on the network are in sync and follow
      the same protocol for validating and adding transactions. They are
      critical for maintaining the blockchain's integrity and security.


      | Param                |
      Description                                                                                              
      | Arbitrum One               | Nova                      | Arb
      Goerli                | Arb Sepolia               |

      |----------------------|-----------------------------------------------------------------------------------------------------------|----------------------------|---------------------------|---------------------------|---------------------------|

      | Dispute window       | Time for assertions to get confirmed during which
      validaors can issue a challenge                         | 45818 blocks (~
      6.4 days ) | 45818 blocks (~ 6.4 days) | 20 blocks (~ 4.0 minutes) | 20
      blocks (~ 4.0 minutes) |

      | Base stake           | Amount of stake required for a validator to make
      an assertion                                             | 1
      ETH                      | 1 ETH                     | 1 Goerli
      ETH              | 1 Sepolia ETH             |

      | Force-include period | Period after which a delayed message can be
      included into the inbox without any action from the Sequencer | 5760
      blocks / 24 hours     | 5760 blocks / 24 hours    | 5760 blocks / 24
      hours    | 5760 blocks / 24 hours    |

      | Gas speed limit      | Target gas/sec, over which the congestion
      mechanism activates                                             |
      7,000,000 gas/sec          | 7,000,000 gas/sec         | 3,000,000
      gas/sec         | 7,000,000 gas/sec         |

      | Gas price floor      | Minimum gas
      price                                                                                        
      | 0.1 gwei                   | 0.01 gwei                 | 0.1
      gwei                  | 0.1 gwei                  |

      | Block gas limit      | Maximum amount of gas that all the transactions
      inside a block are allowed to consume                     |
      32,000,000                 | 32,000,000                |
      20,000,000                | 32,000,000                |
    name: Customizing Orbit Chain
    stepItems: []
    uuid: 061749cd-bd33-4f0b-9524-1ab46bcd2411
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 3ecc45ec-080d-4df9-893c-e6b4654cc324
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi
uuid: arbitrum-orbit-arbitrum-university-525
version: 1
priority: 80
