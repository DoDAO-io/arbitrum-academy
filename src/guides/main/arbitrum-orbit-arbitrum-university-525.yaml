categories: []
content: 'Exploring Arbitrum Orbit: The Next Frontier in Layer-2 Solutions'
created: '2023-10-31T18:37:22.223Z'
guideType: onboarding
key: arbitrum-orbit-arbitrum-university-525
name: Arbitrum Orbit
publishStatus: Live
steps:
  - content: >-
      ## What is Arbitrum Oribit


      Arbitrum Orbit is a product that allows you to create your own dedicated
      chain that settles to one of Arbitrum's Layer 2 (L2) chains. These L2
      chains include Arbitrum One, Arbitrum Nova, Arbitrum Goerli, and Arbitrum
      Sepolia. With Arbitrum Orbit, you have full ownership and control over
      your chain. You can customize its privacy settings, permissions, fee
      token, governance, and more.


      ## Why do we need it?


      #### Gas Price Reliability


      One of the key benefits of using Arbitrum Orbit is the gas price
      reliability it offers to end-users. The dedicated throughput and traffic
      isolation provided by Orbit chains ensure that your users can enjoy
      consistent and predictable gas prices. This is particularly useful in the
      Ethereum ecosystem, where network congestion often leads to high gas fees
      and delays.


      #### Control on Permission Access


      Another advantage of Arbitrum Orbit is the ability to implement permission
      access. You can decide who can read your chain's data and who can deploy
      smart contracts to your chain. This allows you to create a completely
      permissionless chain like Ethereum and Arbitrum One, or you can set up
      your own permissions policies according to your specific requirements.


      #### Token of Choice


      Arbitrum Orbit also allows you to collect fees using a token of your
      choice. This gives you the flexibility to experiment with different
      mechanism designs and capture value in a way that aligns with your
      business goals. Additionally, Orbit chains are built on top of Arbitrum's
      L2 Nitro technology stack, which incorporates fraud proofs, advanced
      compression, EVM+ compatibility via Stylus, and continuous improvements.
    name: What is an arbitrum Orbit?
    stepItems: []
    uuid: 16adea27-d0a8-4a7b-99aa-c7635f4cd221
  - content: ''
    name: Evaluation
    stepItems:
      - label: Full Name
        required: false
        type: PublicShortInput
        uuid: 8057ffff-5953-4d13-be00-1a462febb9d1
      - answerKeys:
          - choice_1
          - choice_2
          - choice_3
        choices:
          - content: Choice 1
            key: choice_1
          - content: Choice 2
            key: choice_2
          - content: Choice 3
            key: choice_3
          - content: Choice 4
            key: choice_4
        content: Contents of the question
        type: MultipleChoice
        uuid: a34afef3-148a-4e79-8f14-fe0aae2c90f7
        explanation: Explanation of the question
    uuid: 62a5e58f-54fa-45d3-ba27-92d8ab5f9a40
  - content: >
      ## Importance of Orbit Chains


      The Orbit Chain is of great importance because it is a valuable tool for
      developers and users of decentralized applications (dApps). 


      #### Dedicated Throughput


      One of the key advantages is dedicated throughput. By running a dApp on
      its own Orbit chain, developers can ensure high-performance and consistent
      resource availability. This means they don't have to compete for
      computation and storage resources, resulting in a smoother and more
      efficient user experience.


      #### Compatible to EVM+


      Another significant benefit is EVM+ compatibility. Orbit chains support
      the same EVM+ compatibility as Stylus, allowing developers to deploy
      EVM-compatible smart contracts using popular programming languages like
      Solidity, C, C++, and Rust. This eliminates the need to migrate to a new
      language or toolchain, making it easier for developers to continue using
      their preferred technologies.


      #### Independent Product Roadmap


      Orbit chains also offer an independent product roadmap. This means that
      developers can decouple their app chain's roadmap from that of Ethereum
      and/or Arbitrum. By doing so, they can implement cutting-edge features and
      innovations ahead of projects following Ethereum's public roadmap. This
      flexibility allows developers to stay ahead of the curve and deliver
      unique and advanced functionalities to their users.


      #### Increased Gas Price Reliability


      Orbit chains provide increased gas price reliability. Gas prices can
      greatly impact the cost and efficiency of dApps. By using Orbit chains,
      developers can isolate their dApp from the on-chain activity of other
      apps, ensuring more reliable gas prices. This predictability allows
      developers to model and predict business costs accurately, making it
      easier to experiment with cost-prohibitive mechanisms and deliver
      decentralized experiences that feel familiar to non-technical audiences.


      #### Customizable fee Tokens


      Orbit chains offer customizable fee tokens and protocol logic. Developers
      have the freedom to choose any token as the fee token, facilitating
      seamless integration with their dApp's ecosystem. They can also modify the
      logic of their chain's settlement, execution, or governance protocols to
      meet specific requirements. This customization allows developers to tailor
      their dApps to their unique needs and create a more optimized and
      efficient user experience.
    name: Importance of Orbit Chain
    stepItems: []
    uuid: dc9130cc-0a1c-4d6c-8f47-06622f53d0ef
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 3f7ccfec-7f60-48c2-a0dd-4a1df45eb790
  - content: >-
      ## Launching an Orbit Chain


      Launching an orbit chain involves several steps to ensure a smooth
      deployment. 


      #### Step 1


      Firstly, you need to acquire at least 1.5 testnet $ETH to cover the cost
      of deploying your Orbit chain's base contracts. It is recommended to use
      the Sepolia network instead of Goerli as Goerli will be deprecated soon.
      You can acquire testnet $ETH by using an L1 testnet $ETH faucet like
      goerlifaucet.com or sepoliafaucet.com.


      #### Step 2


      Once you have the testnet $ETH, you need to bridge it from Ethereum's L1
      Goerli or Sepolia network to Arbitrum's corresponding L2 testnet. This can
      be done using the Arbitrum bridge. It is important to note that Arbitrum
      Rollup is a trustless and permissionless protocol that requires all chain
      data to be posted on Ethereum's "Layer 1" (L1) chain. This ensures the
      security and availability of the data.


      #### Step 3


      Depending on your use-case, you can choose between Rollup chains and
      AnyTrust chains. Rollup chains are recommended for use-cases that demand a
      high level of security, such as decentralized exchanges and DeFi
      applications. AnyTrust chains, on the other hand, are suitable for
      use-cases that require lower fees and generate a large number of
      transactions, such as gaming and social applications.


      #### Step 4


      Once you have decided on the type of chain, you need to configure the
      validators and batch poster. Validators are responsible for validating the
      integrity of transactions, while the batch poster is responsible for
      posting batches of transactions from your Orbit chain to its base
      contracts. These addresses need to be added to an allow-list in your
      chain's base contracts.


      #### Step 5


      After configuring the validators and batch poster, you can proceed to
      review and deploy your Orbit chain. This involves submitting a transaction
      to the Arbitrum testnet, which deploys your Orbit chain's base contracts
      to the Arbitrum testnet. These base contracts facilitate the exchange of
      information between your chain's node(s) and its base chain's nodes.


      #### Step 6


      Once the deployment is complete, you may need to configure your keyset if
      you deployed an AnyTrust chain. This involves assigning an initial keyset
      to your SequencerInbox contract. Finally, you can download your chain's
      configuration files and launch your chain. These files contain important
      information about your chain, including the addresses of your chain's base
      contracts.


      By following these steps, you can successfully launch an orbit chain and
      start utilizing its features and capabilities. Remember to fund the batch
      poster and validator accounts on your underlying L2 chain and deposit ETH
      into your account using the chain's bridge. Monitoring the logs and
      tracking the progress of your chain's deployment is also important for
      debugging and troubleshooting purposes.
    name: How to launch an Orbit Chain?
    stepItems: []
    uuid: 4a550e4d-c00e-4586-8051-3403a44a7929
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: d01a95c5-37c4-48db-89f0-2dd8d9b6f80b
  - content: >-
      Orbit ownership and licensing play a crucial role in the management and
      upgrades of Orbit chains. The chain owner of an Orbit chain is responsible
      for carrying out critical upgrades to the chain's core protocol. This
      includes tasks such as upgrading protocol contracts, setting core system
      parameters, and adding or removing other chain owners. The initial chain
      owner of an Orbit chain is determined by the chain's creator during
      deployment.


      The chain-ownership architecture of Orbit chains offers flexibility to the
      creators in deciding how upgrades to their chain occur. However, it is
      important to note that Orbit is still in its public preview phase, and the
      product and its documentation may undergo significant changes based on
      user feedback.


      Each Orbit chain is deployed with two Upgrade Executors, one on the Orbit
      chain itself and one on its parent chain. The Upgrade Executor contracts
      are given the critical affordances of the chain at deployment. The parent
      chain's core protocol contracts are upgradeable proxies controlled by a
      proxy admin, which is owned by the Upgrade Executor on the parent chain.
      Similarly, the Upgrade Executor on the parent chain is given the admin
      role of the core Rollup contract.


      To initiate upgrades, a chain owner must call the Upgrade Executor, which
      then calls the target contract. Only entities granted the EXECUTOR_ROLE
      affordance on the Upgrade Executor can make calls to it. Upgrade executors
      also have the ADMIN_ROLE affordance, allowing chain owners to add or
      remove other chain owners.


      The Upgrade Executor serves as a single source of truth for the critical
      upgradability of the chain. Upgrades can be executed by calling
      UpgradeExecutor.executeCall to directly call the target contract or by
      using UpgradeExecutor.execute to delegate-call to an "action contract" and
      utilize its code to call the target contract.


      A chain owner can be any address and is set by the Orbit chain's deployer.
      It can represent various governance schemes such as an externally owned
      account (EOA), a multisig, or a governance token system. The Arbitrum DAO
      governed chains, although not Orbit chains themselves, follow a similar
      architecture and upgrade pattern with a governance token and a multisig
      acting as chain owners.


      If you want to launch an independent Arbitrum Nitro chain as an L2 on
      Ethereum, you will need to obtain a custom license as the Arbitrum Orbit
      license does not automatically include chains that settle to a
      non-Arbitrum-DAO-governed chain. You have two options to obtain a custom
      license. Firstly, you can reach out to Offchain Labs, the initial
      developer of the Arbitrum Nitro codebase, who serves as the licensor of
      the software and can grant custom licenses. Secondly, you can propose your
      L2 chain to the Arbitrum DAO, which has co-licensor rights to approve
      additional L2s on Ethereum that do not settle to a DAO-governed chain. The
      DAO will democratically decide whether to grant the license for your
      proposed L2 chain based on the submitted proposal.
    name: Orbit Ownership and Licensing
    stepItems: []
    uuid: 061749cd-bd33-4f0b-9524-1ab46bcd2411
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 3ecc45ec-080d-4df9-893c-e6b4654cc324
  - content: ''
    name: Customize Orbit's Precompiles
    stepItems: []
    uuid: 4a32d9e2-67db-449a-8855-c81923d2235b
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 2fbf3bc3-4ebb-4e56-aa3f-3a9b4d41b3aa
  - content: ''
    name: Customizing Orbit's Behavior
    stepItems: []
    uuid: 14adb360-28f6-443f-91fa-aa4bd739db19
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: c8b8de87-633b-4859-9735-8626bb4912ef
  - content: ''
    name: Adding Testnet Orbit to Bridge
    stepItems: []
    uuid: 891cf4d3-b625-40ef-b3dd-91550445ccf9
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 434af98e-6faa-4d81-8839-80551f065301
  - content: ''
    name: Customizing Orbit's Deployment
    stepItems: []
    uuid: f3695fc2-2f3d-4e42-b679-7abaadbef60c
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 6bef430c-31af-4813-9d6f-26fabf977eee
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi
uuid: arbitrum-orbit-arbitrum-university-525
version: 1
priority: 50
