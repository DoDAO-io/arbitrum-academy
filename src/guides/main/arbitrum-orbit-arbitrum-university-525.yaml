categories: []
content: 'Exploring Arbitrum Orbit: The Next Frontier in Layer-2 Solutions'
created: '2023-11-09T17:29:35.451Z'
guideType: onboarding
key: arbitrum-orbit-arbitrum-university-525
name: Arbitrum Orbit
publishStatus: Live
steps:
  - content: >-
      ## Introduction to Orbit

      ### What is Orbit?

      ### Purpose of Orbit

      ### Benefits of Orbit


      ## How to launch an orbit chain?

      ### Step by step guide and diagram

      ### Cross chain messaging


      ## Orbit Ownership 

      ### Licensing 

      ### How (and when) to customize your Orbit chain's deployment
      configuration


      ## Customizing Orbit Chain

      ### step by step guide to Customizing behaviours

      ### Chain Parameters














      ## What is Arbitrum Orbit?


      Arbitrum Orbit is a product that allows you to create your own dedicated
      chain that settles to one of Arbitrum's Layer 2 (L2) chains. These L2
      chains include Arbitrum One, Arbitrum Nova, Arbitrum Goerli, and Arbitrum
      Sepolia. With Arbitrum Orbit, you have full ownership and control over
      your chain. You can customize its privacy settings, permissions, fee
      token, governance, and more.


      ## Why do we need it?


      #### Gas Price Reliability


      One of the key benefits of using Arbitrum Orbit is the gas price
      reliability it offers to end-users. The dedicated throughput and traffic
      isolation provided by Orbit chains ensure that your users can enjoy
      consistent and predictable gas prices. This is particularly useful in the
      Ethereum ecosystem, where network congestion often leads to high gas fees
      and delays.


      #### Control on Permission Access


      Another advantage of Arbitrum Orbit is the ability to implement permission
      access. You can decide who can read your chain's data and who can deploy
      smart contracts to your chain. This allows you to create a completely
      permissionless chain like Ethereum and Arbitrum One, or you can set up
      your own permissions policies according to your specific requirements.


      #### Token of Choice


      Arbitrum Orbit also allows you to collect fees using a token of your
      choice. This gives you the flexibility to experiment with different
      mechanism designs and capture value in a way that aligns with your
      business goals. Additionally, Orbit chains are built on top of Arbitrum's
      L2 Nitro technology stack, which incorporates fraud proofs, advanced
      compression, EVM+ compatibility via Stylus, and continuous improvements.
    name: What is Arbitrum Orbit?
    stepItems: []
    uuid: 16adea27-d0a8-4a7b-99aa-c7635f4cd221
  - content: ''
    name: Evaluation
    stepItems:
      - label: Full Name
        required: false
        type: PublicShortInput
        uuid: 8057ffff-5953-4d13-be00-1a462febb9d1
      - answerKeys:
          - choice_1
          - choice_2
          - choice_3
        choices:
          - content: Choice 1
            key: choice_1
          - content: Choice 2
            key: choice_2
          - content: Choice 3
            key: choice_3
          - content: Choice 4
            key: choice_4
        content: Contents of the question
        type: MultipleChoice
        uuid: a34afef3-148a-4e79-8f14-fe0aae2c90f7
        explanation: Explanation of the question
    uuid: 62a5e58f-54fa-45d3-ba27-92d8ab5f9a40
  - content: >
      ## Importance of Orbit Chains


      The Orbit Chain is of great importance because it is a valuable tool for
      developers and users of decentralized applications (dApps). 


      #### Dedicated Throughput


      One of the key advantages is dedicated throughput. By running a dApp on
      its own Orbit chain, developers can ensure high-performance and consistent
      resource availability. This means they don't have to compete for
      computation and storage resources, resulting in a smoother and more
      efficient user experience.


      #### Compatible to EVM+


      Another significant benefit is EVM+ compatibility. Orbit chains support
      the same EVM+ compatibility as Stylus, allowing developers to deploy
      EVM-compatible smart contracts using popular programming languages like
      Solidity, C, C++, and Rust. This eliminates the need to migrate to a new
      language or toolchain, making it easier for developers to continue using
      their preferred technologies.


      #### Independent Product Roadmap


      Orbit chains also offer an independent product roadmap. This means that
      developers can decouple their app chain's roadmap from that of Ethereum
      and/or Arbitrum. By doing so, they can implement cutting-edge features and
      innovations ahead of projects following Ethereum's public roadmap. This
      flexibility allows developers to stay ahead of the curve and deliver
      unique and advanced functionalities to their users.


      #### Increased Gas Price Reliability


      Orbit chains provide increased gas price reliability. Gas prices can
      greatly impact the cost and efficiency of dApps. By using Orbit chains,
      developers can isolate their dApp from the on-chain activity of other
      apps, ensuring more reliable gas prices. This predictability allows
      developers to model and predict business costs accurately, making it
      easier to experiment with cost-prohibitive mechanisms and deliver
      decentralized experiences that feel familiar to non-technical audiences.


      #### Customizable fee Tokens


      Orbit chains offer customizable fee tokens and protocol logic. Developers
      have the freedom to choose any token as the fee token, facilitating
      seamless integration with their dApp's ecosystem. They can also modify the
      logic of their chain's settlement, execution, or governance protocols to
      meet specific requirements. This customization allows developers to tailor
      their dApps to their unique needs and create a more optimized and
      efficient user experience.
    name: Importance of Orbit Chain
    stepItems: []
    uuid: dc9130cc-0a1c-4d6c-8f47-06622f53d0ef
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 3f7ccfec-7f60-48c2-a0dd-4a1df45eb790
  - content: >-
      ## Launching an Orbit Chain


      Launching an orbit chain involves several steps to ensure a smooth
      deployment. 


      #### Step 1


      Firstly, you need to acquire at least 1.5 testnet $ETH to cover the cost
      of deploying your Orbit chain's base contracts. It is recommended to use
      the Sepolia network instead of Goerli as Goerli will be deprecated soon.
      You can acquire testnet $ETH by using an L1 testnet $ETH faucet like
      goerlifaucet.com or sepoliafaucet.com.


      #### Step 2


      Once you have the testnet $ETH, you need to bridge it from Ethereum's L1
      Goerli or Sepolia network to Arbitrum's corresponding L2 testnet. This can
      be done using the Arbitrum bridge. It is important to note that Arbitrum
      Rollup is a trustless and permissionless protocol that requires all chain
      data to be posted on Ethereum's "Layer 1" (L1) chain. This ensures the
      security and availability of the data.


      #### Step 3


      Depending on your use-case, you can choose between Rollup chains and
      AnyTrust chains. Rollup chains are recommended for use-cases that demand a
      high level of security, such as decentralized exchanges and DeFi
      applications. AnyTrust chains, on the other hand, are suitable for
      use-cases that require lower fees and generate a large number of
      transactions, such as gaming and social applications.


      #### Step 4


      Once you have decided on the type of chain, you need to configure the
      validators and batch poster. Validators are responsible for validating the
      integrity of transactions, while the batch poster is responsible for
      posting batches of transactions from your Orbit chain to its base
      contracts. These addresses need to be added to an allow-list in your
      chain's base contracts.


      #### Step 5


      After configuring the validators and batch poster, you can proceed to
      review and deploy your Orbit chain. This involves submitting a transaction
      to the Arbitrum testnet, which deploys your Orbit chain's base contracts
      to the Arbitrum testnet. These base contracts facilitate the exchange of
      information between your chain's node(s) and its base chain's nodes.


      #### Step 6


      Once the deployment is complete, you may need to configure your keyset if
      you deployed an AnyTrust chain. This involves assigning an initial keyset
      to your SequencerInbox contract. Finally, you can download your chain's
      configuration files and launch your chain. These files contain important
      information about your chain, including the addresses of your chain's base
      contracts.


      By following these steps, you can successfully launch an orbit chain and
      start utilizing its features and capabilities. Remember to fund the batch
      poster and validator accounts on your underlying L2 chain and deposit ETH
      into your account using the chain's bridge. Monitoring the logs and
      tracking the progress of your chain's deployment is also important for
      debugging and troubleshooting purposes.
    name: How to launch an Orbit Chain?
    stepItems: []
    uuid: 4a550e4d-c00e-4586-8051-3403a44a7929
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: d01a95c5-37c4-48db-89f0-2dd8d9b6f80b
  - content: >-
      ## Ownership and Architecture


      Orbit chains introduce a concept of 'chain ownership'. A chain owner has
      the authority to make pivotal updates to the chain, like altering core
      protocols or even adding or removing other owners. Initially, the creator
      of the Orbit chain sets its first owner. The design of this ownership
      structure offers flexibility in how chains get updated over time. This
      architecture is managed through Upgrade Executor contracts. These
      contracts essentially act as the main controllers for pivotal chain
      adjustments. For example, they manage the upgradation of the parent
      chain's core protocols and the core Rollup contract's admin role. In
      essence, these executors act as the ultimate point of control, making sure
      the chain can be upgraded safely and correctly.


      #### Upgrade Mechanism


      Updates are facilitated when a chain owner communicates with an Upgrade
      Executor. This communication can either be direct or via an intermediary
      "action contract". This mechanism ensures that changes to the chain happen
      in a controlled and predictable manner.


      #### Ownership Flexibility


      The beauty of the Orbit chain is the adaptability in ownership. A chain
      owner isn't restricted to a specific type; it could be a single address,
      multiple users in a multisig configuration, or even a governance system.
      The Arbitrum DAO, although not an Orbit chain, employs a similar design,
      allowing a blend of governance tokens and multisig configurations.


      ## Licensing


      Arbitrum Nitro codebase is open for customization, with a licensing model
      that's both perpetual and recursive. This means once you have the license,
      it's yours forever. Additionally, your Orbit chain can host other chains
      under the same license agreement. However, a notable clause is that if you
      wish for your chain to settle on a non-Arbitrum-DAO-governed platform,
      like Ethereum's independent L2, a distinct license is required. Two
      pathways exist for this: either approach Offchain Labs directly or make a
      proposal to the Arbitrum DAO for democratic consideration.
    name: Orbit Ownership and Licensing
    stepItems: []
    uuid: 061749cd-bd33-4f0b-9524-1ab46bcd2411
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 3ecc45ec-080d-4df9-893c-e6b4654cc324
  - content: |-
      Coding related content
      https://docs.arbitrum.io/launch-orbit-chain/how-tos/customize-precompile 
    name: Customize Orbit's Precompiles
    stepItems: []
    uuid: 4a32d9e2-67db-449a-8855-c81923d2235b
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 2fbf3bc3-4ebb-4e56-aa3f-3a9b4d41b3aa
  - content: |+
      Coding related Content
      https://docs.arbitrum.io/launch-orbit-chain/how-tos/customize-stf 


    name: Customizing Orbit's Behavior
    stepItems: []
    uuid: 14adb360-28f6-443f-91fa-aa4bd739db19
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: c8b8de87-633b-4859-9735-8626bb4912ef
  - content: >-
      ## How to add your testnet Orbit chain to Arbitrum's bridge?


      To add your testnet Orbit chain to Arbitrum's bridge, follow these steps:


      1. If you're currently connected to mainnet and don't want to manually
      switch networks in your wallet, you can enable testnet mode in the bridge.
      Simply click on your address in the top right corner of the bridge UI, go
      to Settings, and turn on testnet mode.


      2. In the Settings section of the bridge UI, scroll down until you find
      "Add Testnet Orbit Chain: Orbit Bridge." This is where you will add your
      testnet Orbit chain.


      3. To add your chain, you need to copy and paste the JSON configuration
      from your generated outputInfo.json file. This file contains the necessary
      information for the bridge to recognize and connect to your testnet Orbit
      chain.


      4. After pasting the JSON configuration, your chain should now appear in
      both the network dropdown in the top navigation pane and as an option in
      the bridging UI. This means that your testnet Orbit chain has been
      successfully added to Arbitrum's bridge.


      ## Important to Note


      Please note that users connecting to the bridge using WalletConnect may
      experience errors due to recent upgrades. If you encounter any issues, it
      is recommended to check for updates or try connecting using a different
      method.


      It's important to remember that the bridge will never ask you for your
      seed phrase or private keys. Be cautious of any requests asking for this
      sensitive information. By following these steps, you can safely and
      securely add your testnet Orbit chain to Arbitrum's bridge and begin
      utilizing its features.
    name: Adding Testnet Orbit to Bridge
    stepItems: []
    uuid: 891cf4d3-b625-40ef-b3dd-91550445ccf9
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 434af98e-6faa-4d81-8839-80551f065301
  - content: >-
      ## Customizing Parameters


      Customizing your Orbit chain's deployment configuration can be done
      through the deployment portal. By default, the form in the portal is
      prefilled with values that usually don't need to be changed. However,
      there are cases where customization may be necessary. When customizing
      your Orbit chain's deployment configuration, it's important to consider
      the tradeoffs associated with each parameter. By carefully selecting the
      values that align with your chain's needs, you can optimize its
      performance and security.


      #### Unique Integer Identifier 


      One parameter to consider customizing is the unique integer identifier for
      your chain's network. This identifier helps distinguish your Orbit chain
      from others. It's important to choose a name that is easily remembered and
      recognized by your users and developers.


      #### Challenge Period 


      Another parameter to consider is the challenge period. This determines the
      amount of time your chain's validators have to dispute the current state
      of the chain. A longer challenge period allows more time for fraudulent
      states to be disputed, but it also means users have to wait longer to
      withdraw their assets.


      #### Stake Tokens


      The stake token parameter specifies the token that validators must deposit
      when staking. This incentivizes honest participation. You can specify the
      token's contract address on the L2 chain or use ETH as the stake token.


      #### Base Stake


      The base stake parameter determines the amount of the stake token that
      validators must deposit to post assertions of the state of your Orbit
      chain. A higher base stake makes it more expensive for attackers to launch
      certain types of attacks, but it also creates a higher barrier to entry
      for validators.


      #### Account Address


      The account address responsible for deploying and updating your Orbit
      chain's base contracts should be considered. In production scenarios, this
      address is often controlled by a governance protocol or multisig. For
      devnet chains, it can be thought of as a low-stakes administrative service
      account.
    name: Customizing Orbit's Deployment
    stepItems: []
    uuid: f3695fc2-2f3d-4e42-b679-7abaadbef60c
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 6bef430c-31af-4813-9d6f-26fabf977eee
  - content: >
      Chain parameters define the essential rules and configurations for a
      blockchain network, such as block size, block time, consensus rules, and
      network IDs, ensuring that all nodes on the network are in sync and follow
      the same protocol for validating and adding transactions. They are
      critical for maintaining the blockchain's integrity and security.


      | Param                |
      Description                                                                                              
      | Arbitrum One               | Nova                      | Arb
      Goerli                | Arb Sepolia               |

      |----------------------|-----------------------------------------------------------------------------------------------------------|----------------------------|---------------------------|---------------------------|---------------------------|

      | Dispute window       | Time for assertions to get confirmed during which
      validaors can issue a challenge                         | 45818 blocks (~
      6.4 days ) | 45818 blocks (~ 6.4 days) | 20 blocks (~ 4.0 minutes) | 20
      blocks (~ 4.0 minutes) |

      | Base stake           | Amount of stake required for a validator to make
      an assertion                                             | 1
      ETH                      | 1 ETH                     | 1 Goerli
      ETH              | 1 Sepolia ETH             |

      | Force-include period | Period after which a delayed message can be
      included into the inbox without any action from the Sequencer | 5760
      blocks / 24 hours     | 5760 blocks / 24 hours    | 5760 blocks / 24
      hours    | 5760 blocks / 24 hours    |

      | Gas speed limit      | Target gas/sec, over which the congestion
      mechanism activates                                             |
      7,000,000 gas/sec          | 7,000,000 gas/sec         | 3,000,000
      gas/sec         | 7,000,000 gas/sec         |

      | Gas price floor      | Minimum gas
      price                                                                                        
      | 0.1 gwei                   | 0.01 gwei                 | 0.1
      gwei                  | 0.1 gwei                  |

      | Block gas limit      | Maximum amount of gas that all the transactions
      inside a block are allowed to consume                     |
      32,000,000                 | 32,000,000                |
      20,000,000                | 32,000,000                |
    name: Chain Parameters
    stepItems: []
    uuid: aebca833-8c0a-491e-ad35-87b9e2889f05
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 26b0af8e-4de1-45cd-ba2c-acb7a331685c
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi
uuid: arbitrum-orbit-arbitrum-university-525
version: 1
priority: 80
