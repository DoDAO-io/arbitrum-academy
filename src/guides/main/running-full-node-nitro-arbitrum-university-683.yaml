categories: []
content: How to run a full node (Nitro)?
created: '2023-11-06T16:56:33.572Z'
guideType: onboarding
key: running-full-node-nitro-arbitrum-university-683
name: Running Full Node (Nitro)
publishStatus: Live
steps:
  - content: >-
      Arbitrum full nodes are integral components of the network, mirroring the
      role of their Ethereum counterparts. They hold the complete and current
      state of the chain, offering a gateway for other entities to engage with
      the network through a provided API. These nodes primarily operate at the
      Layer 2 level, focusing on the chain's immediate state and transactions,
      unrelated with the complexities of Layer1. They process the incoming
      stream of inbox messages, utilizing the State Transition Function (STF) to
      update the Layer 2 chain state and generate the corresponding outputs,
      thereby facilitating the chain's evolution and functionality.


      ## Considerations for Running Arbitrum Full Node


      #### Transaction Validation and Security

      Operating a full node on the Arbitrum blockchain allows users to
      autonomously validate transactions, enhancing network security and
      enabling them to confirm transaction authenticity and integrity without
      depending on external services.


      #### Reduced Trust Requirements

      Running a full node on the Arbitrum network allows users to transact with
      greater autonomy and security, diminishing reliance on third parties and
      reducing exposure to centralized points of failure. This self-reliance
      grants users enhanced control and assurance of transaction integrity.


      #### Lower Resource Requirements

      Full nodes on the Arbitrum network are less resource-intensive than
      archive nodes, making them suitable for users with modest hardware,
      allowing for transaction validation and increased security without the
      need for powerful equipment.


      ## Prerequisites 

      The following hardware and software are required to run a full node:


      #### Minimum hardware configuration

      To set up a Nitro full node (no archival), you would require:

      - RAM: 8-16 GB

      - CPU: 2-4 core CPU (For AWS: t3 xLarge)

      - Storage: Minimum 1.2TB SSD (make sure it is extendable)

      - Estimated Growth Rate: around 3 GB per day
       
      #### Software Prerequisites

      - Latest Docker Image: `offchainlabs/nitro-node:v2.1.1-e9d8842`

      - Database snapshot (required for Arbitrum One, optional for other
      chains):

      1. Use the parameter `--init.url` on first startup to initialize the Nitro
      database (you can find a list of snapshots here). Example:
      `--init.url="https://snapshot.arbitrum.foundation/arb1/nitro-pruned.tar"`.

      2. When running more than one node, it's easier to manually download the
      image of the snapshot and host it locally for your nodes. You can then use
      `--init.url="file:///path/to/snapshot/in/container/snapshot-file.tar"` to
      use it. 

      When initializing an Arbitrum One node, this parameter is mandatory due to
      the presence of classic blocks in the chain. For other chains, the use of
      this parameter is not necessary. If the database is pre-existing, the
      parameter will be disregarded.


      #### Required Parameters 

      L1 RPC URL

      - Specify using `--parent-chain.connection.url=<Layer 1 Ethereum RPC
      URL>`.

      - This must link to an L1 node RPC endpoint, either self-hosted or
      provided by a third-party service.

      - Prior to v2.1.0, this was referred to as `--l1.url`.


      L2 chain id or name

      - Define the L2 chain by its ID with `--chain.id=<L2 chain ID>`. Refer to
      the RPC endpoints and providers documentation for a list of Arbitrum
      chains and corresponding L2 chain IDs.

      - To set the L2 chain by name, use `--chain.name=<L2 chain name>` with
      options including 'arb1', 'nova', 'goerli-rollup', and 'sepolia-rollup'.

      - Before v2.1.0, this was `--l2.chain-id` and accepted only chain IDs.
       
      #### Important Ports 

      - RPC: 8547

      - Sequencer Feed: 9642

      - WebSocket: 8548

      - WS port 8548 needs extra args to be opened. Please use these flags:

      1. --ws.port=8548

      2. --ws.addr=0.0.0.0

      3. --ws.origins=* 
    name: Full Nodes
    stepItems: []
    uuid: c62a372f-7b31-4de5-a179-ac0449b07374
  - content: ''
    name: Evaluation
    stepItems:
      - label: Full Name
        required: false
        type: PublicShortInput
        uuid: 7902163c-997a-4a4b-a867-aed5802f8f24
      - answerKeys:
          - choice_1
          - choice_2
          - choice_3
        choices:
          - content: Choice 1
            key: choice_1
          - content: Choice 2
            key: choice_2
          - content: Choice 3
            key: choice_3
          - content: Choice 4
            key: choice_4
        content: Contents of the question
        type: MultipleChoice
        uuid: b449f310-1f41-4842-a192-7283a918edc2
        explanation: Explanation of the question
    uuid: 5e0af96a-3e39-48ff-a474-b227e7eec2f2
  - content: >-
      ### TODO - Fix formatting of this step - how?




      ### Putting it Together 

      When setting up a Nitro node via Docker, itâ€™s essential to mount an
      external volume to `/home/user/.arbitrum` in the container for persistent
      database storage. First, ensure the local directory (e.g.,
      `/some/local/dir/arbitrum`) exists to prevent permission issues. Run the
      node with the following command: 


      `docker run --rm -it -v /some/local/dir/arbitrum:/home/user/.arbitrum -p
      0.0.0.0:8547:8547 -p 0.0.0.0:8548:8548
      offchainlabs/nitro-node:v2.1.1-e9d8842 --parent-chain.connection.url
      https://l1-node:8545 --chain.id=<L2ChainId> --http.api=net,web3,eth,debug
      --http.corsdomain=* --http.addr=0.0.0.0 --http.vhosts=*`


      If your L1 node is on the same machine (`localhost`), add `--network host`
      for proper networking. Use this command for a smooth shutdown that
      preserves the current state and provides a 300-second timeout to save the
      state:


      `docker stop --time=300 $(docker ps -aq)`


      ### Permissions 

      Resolve permission issues for the Nitro Docker image with:


      `mkdir /data/arbitrum

      chmod -fR 777 /data/arbitrum'`


      This ensures all users have full access to the `/data/arbitrum` directory.


      ### Watchtower Mode

      Nitro full nodes operate in Watchtower mode by default, monitoring
      on-chain assertions and flagging discrepancies with an error log. This
      mode incurs minimal execution and memory overhead. If preferred, reduce
      resource usage by deactivating Watchtower with the flag
      `--node.staker.enable=false`.


      ### Pruning

      To prune a Nitro full node, which entails discarding redundant blockchain
      data beyond the latest 128 blocks to save disk space and enhance
      efficiency, use `--init.prune` with "full" or "validator" as values
      tailored to your node type. Initiate pruning at node startup; note that
      the node will be unavailable for RPC requests during this operation.
    name: Configurations
    stepItems: []
    uuid: 6b399e10-ae42-4832-a0a9-3c783ac1fdb2
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: e97ba39d-652f-4fb7-b5cc-0a35b1d7d014
  - content: >-
      Optional parameters for running a full node in a blockchain network are
      used to customize the node's operation based on the user's preferences or
      specific needs. They are not necessary for the basic functioning of the
      node but can enhance its performance, security, or usability. Such
      parameters may control aspects like logging verbosity, database cache
      size, network bandwidth usage, or enable additional features like metrics
      reporting or API extensions. These parameters offer flexibility to users
      who wish to fine-tune their nodes beyond the default configuration,
      allowing for a more tailored experience depending on the individual's
      system capabilities, security needs, and the role of the node within the
      network. 


      | Flag                              |
      Description                                                                                                                          
      |

      |-----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------|

      | --node.rpc.classic-redirect=<RPC> | Redirects archive requests for
      pre-nitro blocks to this RPC of an Arbitrum Classic node with archive
      database. Only for Arbitrum One. |

      | --http.api                        | Offered APIs over the HTTP-RPC
      interface. Default: net,web3,eth,arb. Add debug for
      tracing.                                           |

      | --http.corsdomain                 | Accepts cross origin requests from
      these comma-separated domains (browser
      enforced).                                                  |

      | --http.vhosts                     | Accepts requests from these
      comma-separated virtual hostnames (server enforced). Default: localhost.
      Accepts *.                       |


      For more details on optional parameters visit
      https://docs.arbitrum.io/node-running/how-tos/running-a-full-node#optional-parameters 
    name: Optional Parameters
    stepItems: []
    uuid: 80f904d8-1e5a-4748-aa82-4d6960184fba
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi
uuid: running-full-node-nitro-arbitrum-university-683
version: 1
priority: 50
