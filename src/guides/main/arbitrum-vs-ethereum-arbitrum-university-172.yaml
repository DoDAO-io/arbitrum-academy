categories: []
content: 'Understanding the differences between Arbitrum and Ethereum '
created: '2023-12-14T11:15:42.044Z'
guideType: onboarding
key: arbitrum-vs-ethereum-arbitrum-university-172
name: Arbitrum vs Ethereum
publishStatus: Live
steps:
  - content: >-
      Arbitrum and Ethereum are quite similar in many ways, but they also have
      some important differences. Here's a simpler explanation of what sets them
      apart:


      1. **Ease of Use for Developers**: If you already know how to build apps
      on Ethereum, you'll find Arbitrum very familiar. It's designed to be very
      much like Ethereum, so there's not much new stuff to learn.


      2. **How They Handle Time and Blocks**: The way Arbitrum deals with time
      and block numbers is different from Ethereum. This is important for
      developers because it affects how and when transactions happen.


      3. **Different Results with Some Commands**: Most of the commands (called
      RPC methods) you use in Arbitrum will work just like in Ethereum. However,
      some of them might give different results or extra information. It's good
      for developers to know this when they use these commands in Arbitrum.


      4. **Small Changes in Contract Deployment**: You can put your Solidity
      contracts onto Arbitrum just like you do in Ethereum, but there are a few
      small differences in how things work.


      5. **Fees**: Paying fees in Arbitrum is a bit like Ethereum. But, in
      Arbitrum, you also pay for something called calldata, which is the cost of
      connecting with the Ethereum chain. This two-part fee is a key difference.


      6. **Sending Messages Between Chains**: Arbitrum lets you send messages
      from Ethereum to Arbitrum and back. This is really useful for apps that
      need to work on both chains.


      7. **Extra Features for Contracts**: Arbitrum has all the features
      (precompiles) that Ethereum has, plus some extra ones just for Arbitrum.
      These extra features give developers more options for their smart
      contracts.


      8. **Special NodeInterface**: Arbitrum has a unique feature called
      NodeInterface. It's a special contract that you can use with commands, but
      it's not actually part of the blockchain like other contracts. It gives
      you some special abilities that regular contracts don't have.
    name: Arbitrum vs Ethereum
    stepItems: []
    uuid: 0d0e922e-6f2d-4e3a-97d4-afe4e527ee61
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - C
        choices:
          - content: >-
              Arbitrum charges fees only for transactions, while Ethereum
              charges for data storage
            key: A
          - content: Ethereum has higher fees than Arbitrum
            key: B
          - content: >-
              In Arbitrum, fee is paid for calldata to connect connect with
              Ethereum chain
            key: C
          - content: Arbitrum does not charge any fees
            key: D
        content: What is a key difference in how Arbitrum and Ethereum handle fees?
        type: SingleChoice
        uuid: e34a552d-bd02-4545-a923-2ea48f44461d
        explanation: >-
          In Arbitrum, you pay for something called calldata, which is the cost
          of connecting with the Ethereum chain. This two-part fee is a key
          difference between Arbitrum and Ethereum.
      - answerKeys:
          - B
        choices:
          - content: It is a special type of node in the Arbitrum network
            key: A
          - content: It's a special contract that you can use with commands
            key: B
          - content: It is a unique feature of Ethereum that Arbitrum does not have
            key: C
          - content: It is a type of smart contract in Ethereum
            key: D
        content: What is the NodeInterface in Arbitrum?
        type: SingleChoice
        uuid: a7c7ab33-6f4b-43ad-9bdf-d2c509656be0
        explanation: >-
          NodeInterface is a unique feature in Arbitrum. It's a special contract
          that you can use with commands, but it's not actually part of the
          blockchain like other contracts. It gives you some special abilities
          that regular contracts don't have.
      - answerKeys:
          - D
        choices:
          - content: Arbitrum does not support contract deployment
            key: A
          - content: Arbitrum supports only a specific type of contract deployment
            key: B
          - content: Arbitrum requires a special type of contract for deployment
            key: C
          - content: >-
              Solidity contracts can be put onto Arbitrum just like in Ethereum,
              but with a few differences
            key: D
        content: What is a unique feature of Arbitrum in terms of contract deployment?
        type: SingleChoice
        uuid: 6e12b5c6-8c0c-4c2d-abd2-cbea84150c86
        explanation: >-
          You can put your Solidity contracts onto Arbitrum just like you do in
          Ethereum, but there are a few small differences in how things work.
    uuid: 5068b4d1-722e-47fd-8e7e-0281507ef189
  - content: >-
      Arbitrum and Ethereum handle block numbers and time differently:


      ### Block Numbers

      - **Arbitrum Blocks vs. Ethereum Blocks**: In Arbitrum, each block gets
      its own L2 block number, which is different from Ethereum's block numbers.
      A single Ethereum block might contain several Arbitrum blocks, but each
      Arbitrum block is linked to just one Ethereum block.


      - **Block Numbers Inside Arbitrum Contracts**: If you check the block
      number inside an Arbitrum contract (like using `block.number` in
      Solidity), you'll get a number that's close to the Ethereum block number
      when the transaction was received. But it's not an exact match – it's more
      of an approximate.


      - **Arbitrum Block Number Creation**: Arbitrum creates blocks based on the
      number of transactions. If lots of people are using Arbitrum, you'll see
      blocks being made regularly. But if it's quieter, the blocks might come
      less frequently. These blocks start at 0 at Arbitrum's beginning and go up
      one by one.


      - **Accessing Block Numbers**: On the technical side, when you ask an
      Arbitrum node for transaction details, you'll get both the Arbitrum block
      number and the approximate Ethereum block number. And within an Arbitrum
      contract, you can use a special command (`ArbSys(100).arbBlockNumber()`)
      to find out the Arbitrum block number.


      ### Block Time

      - **Timing Not Tied to Ethereum**: In Arbitrum, the timing of each block
      isn't directly connected to Ethereum's block times. Instead, it's based on
      the sequencer's clock and updates with each new L2 block.


      - **Rules for Timestamps**: These timestamps have to follow two rules:
        1. Each new block's timestamp must be the same or later than the last block's timestamp.
        2. The timestamp should be within a certain range – no more than 24 hours behind the current time and not more than 1 hour ahead.

      - **Special Case for Transactions**: For certain transactions that come
      directly from Ethereum (bypassing the usual process), the block timestamp
      in Arbitrum will be either the time the transaction was added to Ethereum,
      or the timestamp of the last Arbitrum block, whichever is later.


      - **Adjustments by Sequencer**: The sequencer, which manages the timing,
      has some wiggle room to adjust timestamps. This is to prevent problems if
      it can't post batches to Ethereum on time. But there's a limit to how much
      it can adjust to keep things in order.


      ### Key Takeaways

      - Arbitrum uses its own system for block numbers and times, separate from
      Ethereum.

      - Block numbers in Arbitrum contracts are close to Ethereum's but not
      exact.

      - Arbitrum's block times are based on its own clock, not directly tied to
      Ethereum's.

      - There are specific rules and limits to how Arbitrum handles timestamps
      to keep everything running smoothly.
    name: Block Numbers and Time
    stepItems: []
    uuid: 6c3a5926-2a51-47bb-8993-7ee42a4026b2
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - C
        choices:
          - content: The exact Ethereum block number when the transaction was received
            key: A
          - content: The number of transactions in the block
            key: B
          - content: >-
              An approximate number that's close to the Ethereum block number
              when the transaction was received
            key: C
          - content: The number of Arbitrum blocks in an Ethereum block
            key: D
        content: What does the block number inside an Arbitrum contract represent?
        type: SingleChoice
        uuid: 4c21006f-6770-4bd1-a464-60d0f27afc9d
        explanation: >-
          The block number inside an Arbitrum contract represents an approximate
          number that's close to the Ethereum block number when the transaction
          was received.
      - answerKeys:
          - D
        choices:
          - content: >-
              Each new block's timestamp must be earlier than the last block's
              timestamp
            key: A
          - content: >-
              The timestamp should be within a certain range – no more than 12
              hours behind the current time and not more than 30 minutes ahead
            key: B
          - content: >-
              Each new block's timestamp must be the same or later than the
              Ethereum block's timestamp
            key: C
          - content: >-
              Each new block's timestamp must be the same or later than the last
              block's timestamp 
            key: D
        content: Which of these is the rule for timestamps in Arbitrum?
        type: SingleChoice
        uuid: ad11eedf-83ee-4def-8bf8-a163d6c3348f
        explanation: >-
          In Arbitrum, each new block's timestamp must be the same or later than
          the last block's timestamp. Additionally, the timestamp should be
          within a certain range – no more than 24 hours behind the current time
          and not more than 1 hour ahead.
      - answerKeys:
          - B
        choices:
          - content: Arbitrum creates block numbers based on Ethereum's block numbers
            key: A
          - content: Arbitrum creates block numbers based on the number of transactions
            key: B
          - content: Arbitrum creates block numbers based on the timestamp of the block
            key: C
          - content: Arbitrum creates block numbers randomly
            key: D
        content: How does Arbitrum create block numbers?
        type: SingleChoice
        uuid: c15e1dfd-507d-43e0-8047-a0b5a259e64e
        explanation: >-
          Arbitrum creates blocks based on the number of transactions. If lots
          of people are using Arbitrum, you'll see blocks being made regularly.
          But if it's quieter, the blocks might come less frequently. These
          blocks start at 0 at Arbitrum's beginning and go up one by one.
    uuid: d7e1c842-3dd8-4431-84f7-756db0efcda9
  - content: |-
      The RPC methods in Arbitrum and Ethereum have some key differences:

      1. **Transactions**: 
         - Arbitrum adds new fields and uses some existing fields differently in methods like `eth_getTransactionByHash`.
         - It introduces additional transaction types (e.g., `ArbitrumDepositTxType`, `ArbitrumUnsignedTxType`, etc.) with custom type codes (100-106).

      2. **Transaction Fields**:
         - New fields in Arbitrum: `requestId` for L1 to L2 transactions.
         - Altered fields: The `from` field in L1 to L2 transactions shows the aliased version of L1's `msg.sender`.

      3. **Transaction Receipts**:
         - Additional fields in Arbitrum include `l1BlockNumber` and `gasUsedForL1`.

      4. **Blocks**:
         - In methods like `eth_getBlockByHash`, Arbitrum adds fields such as `l1BlockNumber`, `sendCount`, and `sendRoot`.
         - It alters fields like `extraData`, `mixHash`, `difficulty`, and `gasLimit` differently from Ethereum.

      5. **eth_syncing**:
         - Arbitrum provides more detailed information when syncing, with custom fields like `batchSeen`, `batchProcessed`, `messageOfProcessedBatch`, etc.

      6. **Understanding Messages, Batches, and Blocks**:
         - Nitro nodes in Arbitrum receive and process transactions differently, impacting the relationship between message numbers and block numbers.
    name: RPC Methods
    stepItems: []
    uuid: 052ae7a5-c972-4dd7-badb-fe51e0b8be9e
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - C
        choices:
          - content: Arbitrum removes some fields from the transaction methods
            key: A
          - content: Arbitrum and Ethereum use the transaction methods in the same way
            key: B
          - content: >-
              Arbitrum adds new fields and introduces additional transaction
              types
            key: C
          - content: Arbitrum does not use transaction methods
            key: D
        content: >-
          What is a key difference in the transaction methods between Arbitrum
          and Ethereum?
        type: SingleChoice
        uuid: 5b992272-832a-4b80-8989-d873b85006e2
        explanation: >-
          Arbitrum adds new fields and uses some existing fields differently in
          methods like `eth_getTransactionByHash`. It also introduces additional
          transaction types with custom type codes.
      - answerKeys:
          - B
        choices:
          - content: Arbitrum provides less information when syncing
            key: A
          - content: Arbitrum provides more detailed information with custom fields
            key: B
          - content: Arbitrum and Ethereum provide the same information when syncing
            key: C
          - content: Arbitrum does not provide any information when syncing
            key: D
        content: >-
          What additional information does Arbitrum provide when syncing
          compared to Ethereum?
        type: SingleChoice
        uuid: 5d761fbf-1164-461e-b735-a0ed635d87e9
        explanation: >-
          Arbitrum provides more detailed information when syncing, with custom
          fields like `batchSeen`, `batchProcessed`, `messageOfProcessedBatch`,
          etc.
      - answerKeys:
          - D
        choices:
          - content: Arbitrum removes the `from` field in transactions
            key: A
          - content: Arbitrum does not alter any fields in transactions
            key: B
          - content: Arbitrum and Ethereum use the `from` field in the same way
            key: C
          - content: >-
              Arbitrum shows the aliased version of L1's `msg.sender` in the
              `from` field
            key: D
        content: >-
          What is one way that Arbitrum alters the fields in transaction methods
          compared to Ethereum?
        type: SingleChoice
        uuid: c5637dbf-2e2a-43c9-9bd4-8e667155c966
        explanation: >-
          The `from` field in L1 to L2 transactions in Arbitrum shows the
          aliased version of L1's `msg.sender`.
    uuid: 460179d1-32e7-48dd-9881-4fbb3bfc6a89
  - content: >-
      Arbitrum allows for seamless deployment of Solidity and Vyper smart
      contracts compatible with Ethereum, but certain properties and functions
      may yield different results compared to their Ethereum counterparts.


      1. In Arbitrum, the `blockhash(x)` function returns a pseudo-random hash
      within a specific range, but it should not be considered a secure source
      of randomness, as the hashes do not come from Ethereum's Layer 1 (L1).


      2. The `block.coinbase` function in Arbitrum differs in that it returns a
      designated internal address for messages posted by the sequencer, and for
      delayed messages, it returns the address of the poster. However, changes
      are expected in future updates.


      3. Arbitrum sets the `block.difficulty` and `block.prevrandao` properties
      to a constant value of 1, unlike Ethereum where these values can vary.


      4. The `block.number` function in Arbitrum gives an estimated L1 block
      number correlating with the transaction's reception, while the
      `msg.sender` behaves similarly to Ethereum for regular transactions but
      differs for transactions submitted via the delayed inbox.
    name: Solidity
    stepItems: []
    uuid: 5b4f4c0b-06f0-4c89-9e4d-6509347d0127
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - B
        choices:
          - content: A secure source of randomness
            key: A
          - content: A pseudo-random hash within a specific range
            key: B
          - content: The address of the poster
            key: C
          - content: A constant value of 1
            key: D
        content: What does the `blockhash(x)` function return in Arbitrum?
        type: SingleChoice
        uuid: 6d392d79-e278-4d9f-9cc4-e99cf3e4274f
        explanation: >-
          In Arbitrum, the `blockhash(x)` function returns a pseudo-random hash
          within a specific range. However, it should not be considered a secure
          source of randomness, as the hashes do not come from Ethereum's Layer
          1 (L1).
      - answerKeys:
          - C
        choices:
          - content: A pseudo-random hash within a specific range
            key: A
          - content: A constant value of 1
            key: B
          - content: A designated internal address for messages posted by the sequencer
            key: C
          - content: >-
              An estimated L1 block number correlating with the transaction's
              reception
            key: D
        content: What does the `block.coinbase` function return in Arbitrum?
        type: SingleChoice
        uuid: 9280ca02-4941-426a-8a21-3fb3c8e5d38c
        explanation: >-
          The `block.coinbase` function in Arbitrum returns a designated
          internal address for messages posted by the sequencer, and for delayed
          messages, it returns the address of the poster.
      - answerKeys:
          - D
        choices:
          - content: A pseudo-random hash within a specific range
            key: A
          - content: The address of the poster
            key: B
          - content: >-
              An estimated L1 block number correlating with the transaction's
              reception
            key: C
          - content: A constant value of 1
            key: D
        content: >-
          What values does Arbitrum set for the `block.difficulty` and
          `block.prevrandao` properties?
        type: SingleChoice
        uuid: 2eeb5705-8ba4-41e7-9c49-c66816f62a34
        explanation: >-
          Arbitrum sets the `block.difficulty` and `block.prevrandao` properties
          to a constant value of 1, unlike Ethereum where these values can vary.
    uuid: 9459241f-1fd9-490d-83f8-fc2aeb7e8c30
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/academy/arbitrum-university/Guide/arbitrum_vs_ethereum_arbitrum_university_172/1699897539609_rectangle_105.png
uuid: arbitrum-vs-ethereum-arbitrum-university-172
version: 1
priority: 50
