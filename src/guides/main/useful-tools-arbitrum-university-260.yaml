categories: []
content: Understanding the Useful Tools in Arbitrum
created: '2023-11-06T17:24:45.211Z'
guideType: onboarding
key: useful-tools-arbitrum-university-260
name: Useful Tools
publishStatus: Live
steps:
  - content: >+
      ### TODO - Give an introduction to the guide



      ## RPC Endpoints

      RPC endpoints facilitate interaction with various Arbitrum chains.
      Sequencer endpoints are limited to `eth_sendRawTransaction` and
      `eth_sendRawTransactionConditional` operations.


      | Name                       | RPC Url(s)                             |
      Chain ID | Block explorer                               | Underlying chain
      | Tech stack       | Sequencer feed URL                    | Sequencer
      endpoint⚠️                             |

      |----------------------------|----------------------------------------|----------|----------------------------------------------|------------------|------------------|---------------------------------------|--------------------------------------------------|

      | Arbitrum One               | https://arb1.arbitrum.io/rpc           |
      42161    | https://arbiscan.io/                         | Ethereum        
      | Nitro (Rollup)   | wss://arb1.arbitrum.io/feed           |
      https://arb1-sequencer.arbitrum.io/rpc           |

      | Arbitrum Nova              | https://nova.arbitrum.io/rpc           |
      42170    | https://nova.arbiscan.io/                    | Ethereum        
      | Nitro (AnyTrust) | wss://nova.arbitrum.io/feed           |
      https://nova-sequencer.arbitrum.io/rpc           |

      | Arbitrum Goerli (Testnet)  | https://goerli-rollup.arbitrum.io/rpc  |
      421613   | https://goerli.arbiscan.io                   | Goerli          
      | Nitro (Rollup)   | wss://goerli-rollup.arbitrum.io/feed  |
      https://goerli-rollup-sequencer.arbitrum.io/rpc  |

      | Arbitrum Sepolia (Testnet) | https://sepolia-rollup.arbitrum.io/rpc |
      421614   | https://sepolia.arbiscan.io                  | Sepolia         
      | Nitro (Rollup)   | wss://sepolia-rollup.arbitrum.io/feed |
      https://sepolia-rollup-sequencer.arbitrum.io/rpc |

      | Stylus Testnet             | https://stylus-testnet.arbitrum.io/rpc |
      23011913 | https://stylus-testnet-explorer.arbitrum.io/ | Arbitrum Sepolia
      | Nitro (Rollup)   | wss://stylus-sepolia.arbitrum.io/feed |
      https://stylus-testnet-sequencer.arbitrum.io/rpc |


      ## RPC Providers

      To engage with public Arbitrum chains, you can utilize the same esteemed
      node providers that serve the Ethereum ecosystem.

      | Provider   | Arb One? | Arb Nova? | Arb Goerli? | Arb Sepolia? |

      |------------|----------|-----------|-------------|--------------|

      | Allnodes   | ✅        | ✅         | ✅           |              |

      | Chainstack | ✅        |           | ✅           |              |

      | DataHub    | ✅        |           |             |              |

      | DRPC       | ✅        | ✅         |             |              |

      | GetBlock   | ✅        |           | ✅           |              |

      | Infura     | ✅        |           | ✅           | ✅            |

      | Lava       | ✅        | ✅         |

    name: RPC Endpoint Providers
    stepItems: []
    uuid: 655e2e3e-9d5d-4ecd-9668-8e9671ee5ed3
  - content: ''
    name: Evaluation
    stepItems:
      - label: Full Name
        required: false
        type: PublicShortInput
        uuid: 36db3505-d7e4-44c1-9fbe-4d40b3a538e3
      - answerKeys:
          - choice_1
          - choice_2
          - choice_3
        choices:
          - content: Choice 1
            key: choice_1
          - content: Choice 2
            key: choice_2
          - content: Choice 3
            key: choice_3
          - content: Choice 4
            key: choice_4
        content: Contents of the question
        type: MultipleChoice
        uuid: 583cf885-cf06-4e10-a858-183521ae678a
        explanation: Explanation of the question
    uuid: 5a7e0e7c-3a0f-462e-bf38-0bd3b1f55631
  - content: >-
      ## Tenderly


      Tenderly is a comprehensive Web3 development platform that offers a range
      of tools to help developers debug their decentralized apps (dApps). One of
      the key features of Tenderly is its Debugger, which allows developers to
      analyze smart contracts by examining specific lines of code in a format
      that is easy to understand. This enables developers to quickly identify
      and fix any bugs or issues in their smart contracts.


      #### Simulator

      Another useful tool provided by Tenderly is the Simulator. With the
      Simulator, developers can simulate historical and current transactions
      before sending them on-chain. This allows them to test and debug their
      contracts by modifying relevant parameters and source code. By
      streamlining the debugging process, Tenderly helps developers save time
      and resources while improving the reliability of their smart contracts.
      While Tenderly offers great debugging options, it's important to note that
      there are some limitations when debugging L1-to-L2 messages. This is due
      to the use of custom Geth errors. 


      ## Arbiscan


      Arbiscan is another valuable tool for debugging decentralized apps. It is
      a well-known blockchain explorer and analytics platform that specializes
      in the Arbitrum network. Arbiscan provides VMTrace and Debug tools that
      assist developers and users in understanding the execution of transactions
      on the Ethereum network.


      #### VMTrace

      The VMTrace tool offered by Arbiscan provides a step-by-step visualization
      of the EVM (Ethereum Virtual Machine) execution. This allows developers to
      trace the processing of transactions and identify any potential issues
      that may arise. Additionally, the Debug tools provided by Arbiscan offer
      further information such as input data, logs, and events emitted by the
      smart contract during execution. These tools provide developers with
      valuable insights into the behavior of their contracts and help them debug
      any issues that may arise.
    name: Debugging Tools
    stepItems: []
    uuid: 7592f819-87ad-405a-81d7-8875b44e7cc0
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 9cf39a96-1c0c-406b-a25d-ae1c0046c8a2
  - content: >
      | Tool       |
      Use-cases                                                           |
      Relevant
      links                                                                                                                                                        
      |

      |------------|---------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

      | Arbiscan   | Track/trace transactions and examine addresses on Arbitrum
      networks | Arbitrum One: https://arbiscan.io/ Arbitrum Nova:
      https://nova.arbiscan.io/ Arbitrum Sepolia: https://sepolia.arbiscan.io
      Arbitrum Goerli: https://goerli.arbiscan.io/ |

      | DexGuru    | Track/trace transactions and examine addresses on Arbitrum
      networks | Arbitrum One: https://arbitrum.dex.guru/ Arbitrum Nova:
      https://nova.dex.guru/                                                                                        
      |

      | Blockscout | Track/trace transactions and examine addresses on Arbitrum
      networks | Stylus Testnet:
      https://stylus-testnet-explorer.arbitrum.io                                                                                                           
      |

      | Dune       | Visualize and analyze Arbitrum network
      data                         | https://dune.com/browse/dashboards
      https://dune.com/browse/dashboards?q=arbitrum                                                                                      
      |

      | Chainbase  | Index, transform, and use on-chain data at
      scale                    |
      https://chainbase.com/                                                                                                                                                
      |
    name: Monitoring Tools & Block Explore
    stepItems: []
    uuid: ae119411-0da4-49ab-b15b-a9cd9542f566
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: c545665f-0351-4484-a4bc-08c8cf64f00f
  - content: >-
      #### Chainlink


      Chainlink is a well-known platform in the Web3 services space that
      specializes in decentralized oracle networks. With Chainlink, developers
      can easily build Ethereum and Arbitrum dApps that connect to various
      off-chain data feeds and APIs. These data feeds can provide a wide range
      of information, such as asset prices, weather data, random number
      generation, and more. By integrating Chainlink into your project, you can
      ensure that your dApp has access to accurate and up-to-date off-chain
      data.


      #### API3


      API3 is a collaborative project that aims to deliver traditional API
      services to smart contract platforms in a decentralized and
      trust-minimized manner. One of the key features of API3 is its ability to
      enable Airnodes to push off-chain data to on-chain contracts. This means
      that the data can be directly queried through the Airnode or through
      dAPIs, which are data feeds that provide real-time off-chain data. By
      utilizing API3, developers can seamlessly integrate off-chain data into
      their projects and enhance the functionality of their smart contracts.


      #### Tellor


      Tellor is a decentralized oracle network that incentivizes a
      permissionless network of data reporting and validation. Its main goal is
      to ensure that any verifiable data can be brought on-chain. Tellor
      supports a wide range of data needs, including basic spot prices,
      sophisticated pricing specifications like TWAP/VWAP, Snapshot Vote
      Results, and custom data requirements. By leveraging Tellor, developers
      can integrate reliable and trustworthy off-chain data into their projects,
      making their dApps more robust and secure.


      #### Supra


      Supra is a unique and high-throughput Oracle & IntraLayer toolkit that
      offers a wide range of cross-chain solutions. It includes data oracles,
      asset bridges, automation networks, and more. Supra's main objective is to
      interlink all blockchains, whether they are public (L1s and L2s) or
      private (enterprise). By utilizing Supra, developers can seamlessly
      integrate off-chain data from various blockchains into their projects,
      enabling interoperability and enhancing the overall functionality of their
      applications.
    name: Oracles
    stepItems: []
    uuid: 46de9394-bd29-44b4-8cde-84ff50bfa545
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: b4ed4860-e3ad-4452-a917-897b4b47a92e
  - content: >-
      #### Hardhat

      Hardhat is a comprehensive development environment specifically designed
      for Ethereum, Arbitrum, and EVM developers. It aims to streamline the
      entire process of creating, compiling, deploying, testing, and debugging
      smart contracts. With its robust and customizable framework, Hardhat makes
      it easier for developers to manage complex projects and integrate with
      other tools in the ecosystem. It offers features like a built-in console,
      advanced debugging capabilities, and support for extending functionality
      through plugins. By utilizing Hardhat, developers can create efficient and
      secure decentralized applications.


      #### Foundry

      Foundry is a high-performance, portable, and modular toolkit that
      leverages the Rust programming language for EVM application development.
      It provides a comprehensive suite of tools to simplify the creation,
      testing, and deployment of smart contracts on Ethereum, Arbitrum, and
      other EVM networks. Foundry enables seamless interaction with EVM smart
      contracts, transactions, and chain data. It also offers a local node and a
      user-friendly Solidity REPL environment for efficient development. With
      Foundry, developers can harness the power of Rust to build robust and
      scalable decentralized applications.


      #### Truffle

      Truffle is a comprehensive suite of tools that offers an end-to-end
      solution for smart contract development on Ethereum, Arbitrum, and other
      EVM compatible chains. It covers the entire development lifecycle,
      including building, testing, debugging, and deploying smart contracts.
      Truffle stands out with its advanced debugging capabilities, fast EVM
      simulation with Ganache, and a user-centered design with a VS Code
      extension. It also prioritizes security by partnering with ConsenSys
      Diligence to provide continuous security to projects. With Truffle,
      developers can enjoy a seamless and secure development experience.


      #### Thirdweb SDK

      The thirdweb SDK covers all aspects of the web3 development stack,
      allowing developers to build scalable and performant web3 applications on
      any EVM-compatible blockchain. It provides infrastructure out of the box
      for connecting to user's wallets, interacting with the blockchain and
      smart contracts, decentralized storage, authentication, and more. The SDK
      includes features like gasless transactions, wallet connection components,
      FIAT on-ramps, and data APIs. With thirdweb SDK, developers have
      everything they need to create decentralized applications and deliver
      powerful user experiences.


      #### Brownie

      Brownie is a Python-based framework designed for developing and testing
      smart contracts on the Ethereum Virtual Machine. It offers full support
      for Solidity and Vyper programming languages and utilizes pytest for
      contract testing. Brownie incorporates trace-based coverage evaluation,
      property-based and stateful testing with Hypothesis, and powerful
      debugging tools. With its python-style tracebacks and custom error
      strings, Brownie provides developers with efficient and effective tools
      for smart contract development. By leveraging Brownie, developers can
      write, test, and debug smart contracts with ease.
    name: Development Frameworks
    stepItems: []
    uuid: 62960e42-d0d3-4d72-a317-6c7afc6c4163
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: ae306467-1801-4340-8d1c-30b4e149c1b1
  - content: >-
      #### Ethers.js


      Ethers.js is a comprehensive library for Ethereum, Arbitrum, and
      EVM-compatible blockchain interaction, featuring secure private key
      management, node compatibility, and ENS name integration. It supports JSON
      wallet import/export, BIP 39 mnemonics, and HD wallets, maintaining a
      lightweight profile. The library boasts extensive documentation,
      TypeScript readiness, and is open-source with an MIT License, fostering
      community contributions.


      #### thirdweb SDK


      The thirdweb SDK is a full-stack web3 development toolkit, offering a
      range of features for building scalable applications on EVM-compatible
      blockchains. It simplifies complex tasks with wallet integration, smart
      contract capabilities, decentralized IPFS storage, and authentication
      mechanisms. It also includes a suite of user experience enhancements like
      gasless transactions, wallet connection components, FIAT gateways, and
      data APIs, streamlining the creation of user-friendly decentralized apps
      and allowing developers to concentrate on application development without
      the intricacies of blockchain technology.


      #### Viem


      Viem is a modular, performance-focused tool for developing applications
      and libraries on Ethereum, Arbitrum, and other EVM-compatible blockchains.
      It provides flexible APIs, extensive TypeScript typing, and streamlined
      interaction with JSON-RPC APIs and smart contracts, leveraging official
      Ethereum terminology. With utilities for handling ABIs critical to smart
      contract interaction, Viem simplifies the development process, allowing
      developers to concentrate on building applications without the burden of
      low-level blockchain intricacies.


      #### Web3.js 


      Web3.js is a JavaScript library that allows developers to interact with
      Ethereum and other EVM-compatible blockchains directly from web browsers,
      server-side with Node.js, or in Electron-based applications. It
      streamlines various blockchain tasks, including sending Ether, querying
      smart contract data, and deploying contracts. Web3.js integrates well with
      the MetaMask extension, facilitating the creation of decentralized
      applications and enabling transaction management within browsers.


      #### Web3.py


      Web3.py is a Python library designed for Ethereum blockchain interactions,
      tailored for Python developers. It offers similar functionalities as
      Web3.js, such as facilitating the sending of Ether, smart contract
      deployment, and data retrieval. Web3.py provides Pythonic bindings to the
      JSON RPC interface, making it a powerful and flexible tool for building
      Ethereum-based applications in Python environments. 
    name: Web3 Libraries
    stepItems: []
    uuid: cae31bbc-0e25-4b4d-9df6-90681b896dcc
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: e0704691-428a-4226-affb-9e60eda87e4f
  - content: >
      | Param                |
      Description                                                                                              
      | Arbitrum One               | Nova                      | Arb
      Goerli                | Arb Sepolia               |

      |----------------------|-----------------------------------------------------------------------------------------------------------|----------------------------|---------------------------|---------------------------|---------------------------|

      | Dispute window       | Time for assertions to get confirmed during which
      validaors can issue a challenge                         | 45818 blocks (~
      6.4 days ) | 45818 blocks (~ 6.4 days) | 20 blocks (~ 4.0 minutes) | 20
      blocks (~ 4.0 minutes) |

      | Base stake           | Amount of stake required for a validator to make
      an assertion                                             | 1
      ETH                      | 1 ETH                     | 1 Goerli
      ETH              | 1 Sepolia ETH             |

      | Force-include period | Period after which a delayed message can be
      included into the inbox without any action from the Sequencer | 5760
      blocks / 24 hours     | 5760 blocks / 24 hours    | 5760 blocks / 24
      hours    | 5760 blocks / 24 hours    |

      | Gas speed limit      | Target gas/sec, over which the congestion
      mechanism activates                                             |
      7,000,000 gas/sec          | 7,000,000 gas/sec         | 3,000,000
      gas/sec         | 7,000,000 gas/sec         |

      | Gas price floor      | Minimum gas
      price                                                                                        
      | 0.1 gwei                   | 0.01 gwei                 | 0.1
      gwei                  | 0.1 gwei                  |

      | Block gas limit      | Maximum amount of gas that all the transactions
      inside a block are allowed to consume                     |
      32,000,000                 | 32,000,000                |
      20,000,000                | 32,000,000                |
    name: Chain Parameters
    stepItems: []
    uuid: 884c7c69-2116-45ca-acb8-0c9510a9e601
  - content: ''
    name: Evaluation
    stepItems: []
    uuid: 02bc1767-ce09-4805-b42d-f48b67f55ee7
thumbnail: >-
  https://d31h13bdjwgzxs.cloudfront.net/QmWy8EeMnxqx96VEPx2NBwzqtKxvMQqVVYvmPKgAYS2cUi
uuid: useful-tools-arbitrum-university-260
version: 1
priority: 50
